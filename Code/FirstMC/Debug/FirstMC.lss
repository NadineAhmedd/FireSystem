
FirstMC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000020a0  00002114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c20  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c9c  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000068fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000077e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000086f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009153  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e7 08 	call	0x11ce	; 0x11ce <main>
      7a:	0c 94 4e 10 	jmp	0x209c	; 0x209c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Buzzer_LED>:
#include"Buzzer.h"

void Buzzer_LED(void)
{
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
	/* set pins of Buzzer and LED as output pins */
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN3_ID, PIN_OUTPUT);
      8a:	81 e0       	ldi	r24, 0x01	; 1
      8c:	61 e0       	ldi	r22, 0x01	; 1
      8e:	41 e0       	ldi	r20, 0x01	; 1
      90:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_ID, LED_PIN4_ID, PIN_OUTPUT);
      94:	81 e0       	ldi	r24, 0x01	; 1
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	41 e0       	ldi	r20, 0x01	; 1
      9a:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_setupPinDirection>
	/*stop Buzzer and LED at first*/
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN3_ID, LOGIC_LOW);
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	61 e0       	ldi	r22, 0x01	; 1
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
	GPIO_writePin(LED_PORT_ID, LED_PIN4_ID, LOGIC_LOW);
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	40 e0       	ldi	r20, 0x00	; 0
      ae:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
}
      b2:	cf 91       	pop	r28
      b4:	df 91       	pop	r29
      b6:	08 95       	ret

000000b8 <RUN>:
void RUN (void){
      b8:	df 93       	push	r29
      ba:	cf 93       	push	r28
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN3_ID, LOGIC_HIGH);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	41 e0       	ldi	r20, 0x01	; 1
      c6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
	GPIO_writePin(LED_PORT_ID, LED_PIN4_ID, LOGIC_HIGH);
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	41 e0       	ldi	r20, 0x01	; 1
      d0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
}
      d4:	cf 91       	pop	r28
      d6:	df 91       	pop	r29
      d8:	08 95       	ret

000000da <STOP>:
void STOP (void){
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN3_ID, LOGIC_LOW);
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	61 e0       	ldi	r22, 0x01	; 1
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
	GPIO_writePin(LED_PORT_ID, LED_PIN4_ID, LOGIC_LOW);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
}
      f6:	cf 91       	pop	r28
      f8:	df 91       	pop	r29
      fa:	08 95       	ret

000000fc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
      fc:	df 93       	push	r29
      fe:	cf 93       	push	r28
     100:	00 d0       	rcall	.+0      	; 0x102 <GPIO_setupPinDirection+0x6>
     102:	00 d0       	rcall	.+0      	; 0x104 <GPIO_setupPinDirection+0x8>
     104:	0f 92       	push	r0
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
     10a:	89 83       	std	Y+1, r24	; 0x01
     10c:	6a 83       	std	Y+2, r22	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
	/*set the DDR input or output.....
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	88 30       	cpi	r24, 0x08	; 8
     114:	08 f0       	brcs	.+2      	; 0x118 <GPIO_setupPinDirection+0x1c>
     116:	d5 c0       	rjmp	.+426    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
     118:	89 81       	ldd	r24, Y+1	; 0x01
     11a:	84 30       	cpi	r24, 0x04	; 4
     11c:	08 f0       	brcs	.+2      	; 0x120 <GPIO_setupPinDirection+0x24>
     11e:	d1 c0       	rjmp	.+418    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	28 2f       	mov	r18, r24
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	3d 83       	std	Y+5, r19	; 0x05
     128:	2c 83       	std	Y+4, r18	; 0x04
     12a:	8c 81       	ldd	r24, Y+4	; 0x04
     12c:	9d 81       	ldd	r25, Y+5	; 0x05
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	91 05       	cpc	r25, r1
     132:	09 f4       	brne	.+2      	; 0x136 <GPIO_setupPinDirection+0x3a>
     134:	43 c0       	rjmp	.+134    	; 0x1bc <GPIO_setupPinDirection+0xc0>
     136:	2c 81       	ldd	r18, Y+4	; 0x04
     138:	3d 81       	ldd	r19, Y+5	; 0x05
     13a:	22 30       	cpi	r18, 0x02	; 2
     13c:	31 05       	cpc	r19, r1
     13e:	2c f4       	brge	.+10     	; 0x14a <GPIO_setupPinDirection+0x4e>
     140:	8c 81       	ldd	r24, Y+4	; 0x04
     142:	9d 81       	ldd	r25, Y+5	; 0x05
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	71 f0       	breq	.+28     	; 0x164 <GPIO_setupPinDirection+0x68>
     148:	bc c0       	rjmp	.+376    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
     14a:	2c 81       	ldd	r18, Y+4	; 0x04
     14c:	3d 81       	ldd	r19, Y+5	; 0x05
     14e:	22 30       	cpi	r18, 0x02	; 2
     150:	31 05       	cpc	r19, r1
     152:	09 f4       	brne	.+2      	; 0x156 <GPIO_setupPinDirection+0x5a>
     154:	5f c0       	rjmp	.+190    	; 0x214 <GPIO_setupPinDirection+0x118>
     156:	8c 81       	ldd	r24, Y+4	; 0x04
     158:	9d 81       	ldd	r25, Y+5	; 0x05
     15a:	83 30       	cpi	r24, 0x03	; 3
     15c:	91 05       	cpc	r25, r1
     15e:	09 f4       	brne	.+2      	; 0x162 <GPIO_setupPinDirection+0x66>
     160:	85 c0       	rjmp	.+266    	; 0x26c <GPIO_setupPinDirection+0x170>
     162:	af c0       	rjmp	.+350    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	a1 f4       	brne	.+40     	; 0x192 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     16a:	aa e3       	ldi	r26, 0x3A	; 58
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ea e3       	ldi	r30, 0x3A	; 58
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	48 2f       	mov	r20, r24
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	28 2f       	mov	r18, r24
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 2e       	mov	r0, r18
     182:	02 c0       	rjmp	.+4      	; 0x188 <GPIO_setupPinDirection+0x8c>
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	0a 94       	dec	r0
     18a:	e2 f7       	brpl	.-8      	; 0x184 <GPIO_setupPinDirection+0x88>
     18c:	84 2b       	or	r24, r20
     18e:	8c 93       	st	X, r24
     190:	98 c0       	rjmp	.+304    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     192:	aa e3       	ldi	r26, 0x3A	; 58
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	ea e3       	ldi	r30, 0x3A	; 58
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	48 2f       	mov	r20, r24
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	28 2f       	mov	r18, r24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 2e       	mov	r0, r18
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_setupPinDirection+0xb4>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_setupPinDirection+0xb0>
     1b4:	80 95       	com	r24
     1b6:	84 23       	and	r24, r20
     1b8:	8c 93       	st	X, r24
     1ba:	83 c0       	rjmp	.+262    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     1bc:	8b 81       	ldd	r24, Y+3	; 0x03
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	a1 f4       	brne	.+40     	; 0x1ea <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     1c2:	a7 e3       	ldi	r26, 0x37	; 55
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	e7 e3       	ldi	r30, 0x37	; 55
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	48 2f       	mov	r20, r24
     1ce:	8a 81       	ldd	r24, Y+2	; 0x02
     1d0:	28 2f       	mov	r18, r24
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	02 2e       	mov	r0, r18
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIO_setupPinDirection+0xe4>
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	0a 94       	dec	r0
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIO_setupPinDirection+0xe0>
     1e4:	84 2b       	or	r24, r20
     1e6:	8c 93       	st	X, r24
     1e8:	6c c0       	rjmp	.+216    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     1ea:	a7 e3       	ldi	r26, 0x37	; 55
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e7 e3       	ldi	r30, 0x37	; 55
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	48 2f       	mov	r20, r24
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 2e       	mov	r0, r18
     202:	02 c0       	rjmp	.+4      	; 0x208 <GPIO_setupPinDirection+0x10c>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <GPIO_setupPinDirection+0x108>
     20c:	80 95       	com	r24
     20e:	84 23       	and	r24, r20
     210:	8c 93       	st	X, r24
     212:	57 c0       	rjmp	.+174    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	a1 f4       	brne	.+40     	; 0x242 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     21a:	a4 e3       	ldi	r26, 0x34	; 52
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	e4 e3       	ldi	r30, 0x34	; 52
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	48 2f       	mov	r20, r24
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 2e       	mov	r0, r18
     232:	02 c0       	rjmp	.+4      	; 0x238 <GPIO_setupPinDirection+0x13c>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	0a 94       	dec	r0
     23a:	e2 f7       	brpl	.-8      	; 0x234 <GPIO_setupPinDirection+0x138>
     23c:	84 2b       	or	r24, r20
     23e:	8c 93       	st	X, r24
     240:	40 c0       	rjmp	.+128    	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     242:	a4 e3       	ldi	r26, 0x34	; 52
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e4 e3       	ldi	r30, 0x34	; 52
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8a 81       	ldd	r24, Y+2	; 0x02
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <GPIO_setupPinDirection+0x164>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <GPIO_setupPinDirection+0x160>
     264:	80 95       	com	r24
     266:	84 23       	and	r24, r20
     268:	8c 93       	st	X, r24
     26a:	2b c0       	rjmp	.+86     	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	a1 f4       	brne	.+40     	; 0x29a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     272:	a1 e3       	ldi	r26, 0x31	; 49
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	e1 e3       	ldi	r30, 0x31	; 49
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	48 2f       	mov	r20, r24
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	28 2f       	mov	r18, r24
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	02 2e       	mov	r0, r18
     28a:	02 c0       	rjmp	.+4      	; 0x290 <GPIO_setupPinDirection+0x194>
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	0a 94       	dec	r0
     292:	e2 f7       	brpl	.-8      	; 0x28c <GPIO_setupPinDirection+0x190>
     294:	84 2b       	or	r24, r20
     296:	8c 93       	st	X, r24
     298:	14 c0       	rjmp	.+40     	; 0x2c2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     29a:	a1 e3       	ldi	r26, 0x31	; 49
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e1 e3       	ldi	r30, 0x31	; 49
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	48 2f       	mov	r20, r24
     2a6:	8a 81       	ldd	r24, Y+2	; 0x02
     2a8:	28 2f       	mov	r18, r24
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 2e       	mov	r0, r18
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <GPIO_setupPinDirection+0x1bc>
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	0a 94       	dec	r0
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <GPIO_setupPinDirection+0x1b8>
     2bc:	80 95       	com	r24
     2be:	84 23       	and	r24, r20
     2c0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	08 95       	ret

000002d2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     2d2:	df 93       	push	r29
     2d4:	cf 93       	push	r28
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <GPIO_writePin+0x6>
     2d8:	00 d0       	rcall	.+0      	; 0x2da <GPIO_writePin+0x8>
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	6a 83       	std	Y+2, r22	; 0x02
     2e4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	88 30       	cpi	r24, 0x08	; 8
     2ea:	08 f0       	brcs	.+2      	; 0x2ee <GPIO_writePin+0x1c>
     2ec:	d5 c0       	rjmp	.+426    	; 0x498 <__stack+0x39>
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <GPIO_writePin+0x24>
     2f4:	d1 c0       	rjmp	.+418    	; 0x498 <__stack+0x39>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	28 2f       	mov	r18, r24
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	3d 83       	std	Y+5, r19	; 0x05
     2fe:	2c 83       	std	Y+4, r18	; 0x04
     300:	8c 81       	ldd	r24, Y+4	; 0x04
     302:	9d 81       	ldd	r25, Y+5	; 0x05
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	91 05       	cpc	r25, r1
     308:	09 f4       	brne	.+2      	; 0x30c <GPIO_writePin+0x3a>
     30a:	43 c0       	rjmp	.+134    	; 0x392 <GPIO_writePin+0xc0>
     30c:	2c 81       	ldd	r18, Y+4	; 0x04
     30e:	3d 81       	ldd	r19, Y+5	; 0x05
     310:	22 30       	cpi	r18, 0x02	; 2
     312:	31 05       	cpc	r19, r1
     314:	2c f4       	brge	.+10     	; 0x320 <GPIO_writePin+0x4e>
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	00 97       	sbiw	r24, 0x00	; 0
     31c:	71 f0       	breq	.+28     	; 0x33a <GPIO_writePin+0x68>
     31e:	bc c0       	rjmp	.+376    	; 0x498 <__stack+0x39>
     320:	2c 81       	ldd	r18, Y+4	; 0x04
     322:	3d 81       	ldd	r19, Y+5	; 0x05
     324:	22 30       	cpi	r18, 0x02	; 2
     326:	31 05       	cpc	r19, r1
     328:	09 f4       	brne	.+2      	; 0x32c <GPIO_writePin+0x5a>
     32a:	5f c0       	rjmp	.+190    	; 0x3ea <GPIO_writePin+0x118>
     32c:	8c 81       	ldd	r24, Y+4	; 0x04
     32e:	9d 81       	ldd	r25, Y+5	; 0x05
     330:	83 30       	cpi	r24, 0x03	; 3
     332:	91 05       	cpc	r25, r1
     334:	09 f4       	brne	.+2      	; 0x338 <GPIO_writePin+0x66>
     336:	85 c0       	rjmp	.+266    	; 0x442 <GPIO_writePin+0x170>
     338:	af c0       	rjmp	.+350    	; 0x498 <__stack+0x39>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	a1 f4       	brne	.+40     	; 0x368 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     340:	ab e3       	ldi	r26, 0x3B	; 59
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	eb e3       	ldi	r30, 0x3B	; 59
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	48 2f       	mov	r20, r24
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	28 2f       	mov	r18, r24
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 2e       	mov	r0, r18
     358:	02 c0       	rjmp	.+4      	; 0x35e <GPIO_writePin+0x8c>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	0a 94       	dec	r0
     360:	e2 f7       	brpl	.-8      	; 0x35a <GPIO_writePin+0x88>
     362:	84 2b       	or	r24, r20
     364:	8c 93       	st	X, r24
     366:	98 c0       	rjmp	.+304    	; 0x498 <__stack+0x39>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     368:	ab e3       	ldi	r26, 0x3B	; 59
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	eb e3       	ldi	r30, 0x3B	; 59
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	48 2f       	mov	r20, r24
     374:	8a 81       	ldd	r24, Y+2	; 0x02
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	02 2e       	mov	r0, r18
     380:	02 c0       	rjmp	.+4      	; 0x386 <GPIO_writePin+0xb4>
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <GPIO_writePin+0xb0>
     38a:	80 95       	com	r24
     38c:	84 23       	and	r24, r20
     38e:	8c 93       	st	X, r24
     390:	83 c0       	rjmp	.+262    	; 0x498 <__stack+0x39>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	a1 f4       	brne	.+40     	; 0x3c0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     398:	a8 e3       	ldi	r26, 0x38	; 56
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	e8 e3       	ldi	r30, 0x38	; 56
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	48 2f       	mov	r20, r24
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	28 2f       	mov	r18, r24
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	02 2e       	mov	r0, r18
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <GPIO_writePin+0xe4>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	0a 94       	dec	r0
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <GPIO_writePin+0xe0>
     3ba:	84 2b       	or	r24, r20
     3bc:	8c 93       	st	X, r24
     3be:	6c c0       	rjmp	.+216    	; 0x498 <__stack+0x39>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     3c0:	a8 e3       	ldi	r26, 0x38	; 56
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e8 e3       	ldi	r30, 0x38	; 56
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	48 2f       	mov	r20, r24
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 2e       	mov	r0, r18
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_writePin+0x10c>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_writePin+0x108>
     3e2:	80 95       	com	r24
     3e4:	84 23       	and	r24, r20
     3e6:	8c 93       	st	X, r24
     3e8:	57 c0       	rjmp	.+174    	; 0x498 <__stack+0x39>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	a1 f4       	brne	.+40     	; 0x418 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     3f0:	a5 e3       	ldi	r26, 0x35	; 53
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	e5 e3       	ldi	r30, 0x35	; 53
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	48 2f       	mov	r20, r24
     3fc:	8a 81       	ldd	r24, Y+2	; 0x02
     3fe:	28 2f       	mov	r18, r24
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 2e       	mov	r0, r18
     408:	02 c0       	rjmp	.+4      	; 0x40e <GPIO_writePin+0x13c>
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	0a 94       	dec	r0
     410:	e2 f7       	brpl	.-8      	; 0x40a <GPIO_writePin+0x138>
     412:	84 2b       	or	r24, r20
     414:	8c 93       	st	X, r24
     416:	40 c0       	rjmp	.+128    	; 0x498 <__stack+0x39>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     418:	a5 e3       	ldi	r26, 0x35	; 53
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	e5 e3       	ldi	r30, 0x35	; 53
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	48 2f       	mov	r20, r24
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	28 2f       	mov	r18, r24
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 2e       	mov	r0, r18
     430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_writePin+0x164>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_writePin+0x160>
     43a:	80 95       	com	r24
     43c:	84 23       	and	r24, r20
     43e:	8c 93       	st	X, r24
     440:	2b c0       	rjmp	.+86     	; 0x498 <__stack+0x39>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	81 30       	cpi	r24, 0x01	; 1
     446:	a1 f4       	brne	.+40     	; 0x470 <__stack+0x11>
			{
				SET_BIT(PORTD,pin_num);
     448:	a2 e3       	ldi	r26, 0x32	; 50
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e2 e3       	ldi	r30, 0x32	; 50
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	48 2f       	mov	r20, r24
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	28 2f       	mov	r18, r24
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	02 2e       	mov	r0, r18
     460:	02 c0       	rjmp	.+4      	; 0x466 <__stack+0x7>
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	0a 94       	dec	r0
     468:	e2 f7       	brpl	.-8      	; 0x462 <__stack+0x3>
     46a:	84 2b       	or	r24, r20
     46c:	8c 93       	st	X, r24
     46e:	14 c0       	rjmp	.+40     	; 0x498 <__stack+0x39>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     470:	a2 e3       	ldi	r26, 0x32	; 50
     472:	b0 e0       	ldi	r27, 0x00	; 0
     474:	e2 e3       	ldi	r30, 0x32	; 50
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	48 2f       	mov	r20, r24
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	28 2f       	mov	r18, r24
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 2e       	mov	r0, r18
     488:	02 c0       	rjmp	.+4      	; 0x48e <__stack+0x2f>
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <__stack+0x2b>
     492:	80 95       	com	r24
     494:	84 23       	and	r24, r20
     496:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	08 95       	ret

000004a8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <GPIO_readPin+0x6>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <GPIO_readPin+0x8>
     4b0:	0f 92       	push	r0
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	8a 83       	std	Y+2, r24	; 0x02
     4b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     4ba:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	08 f0       	brcs	.+2      	; 0x4c4 <GPIO_readPin+0x1c>
     4c2:	84 c0       	rjmp	.+264    	; 0x5cc <GPIO_readPin+0x124>
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	84 30       	cpi	r24, 0x04	; 4
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <GPIO_readPin+0x24>
     4ca:	80 c0       	rjmp	.+256    	; 0x5cc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	28 2f       	mov	r18, r24
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	3d 83       	std	Y+5, r19	; 0x05
     4d4:	2c 83       	std	Y+4, r18	; 0x04
     4d6:	4c 81       	ldd	r20, Y+4	; 0x04
     4d8:	5d 81       	ldd	r21, Y+5	; 0x05
     4da:	41 30       	cpi	r20, 0x01	; 1
     4dc:	51 05       	cpc	r21, r1
     4de:	79 f1       	breq	.+94     	; 0x53e <GPIO_readPin+0x96>
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	9d 81       	ldd	r25, Y+5	; 0x05
     4e4:	82 30       	cpi	r24, 0x02	; 2
     4e6:	91 05       	cpc	r25, r1
     4e8:	34 f4       	brge	.+12     	; 0x4f6 <GPIO_readPin+0x4e>
     4ea:	2c 81       	ldd	r18, Y+4	; 0x04
     4ec:	3d 81       	ldd	r19, Y+5	; 0x05
     4ee:	21 15       	cp	r18, r1
     4f0:	31 05       	cpc	r19, r1
     4f2:	69 f0       	breq	.+26     	; 0x50e <GPIO_readPin+0x66>
     4f4:	6b c0       	rjmp	.+214    	; 0x5cc <GPIO_readPin+0x124>
     4f6:	4c 81       	ldd	r20, Y+4	; 0x04
     4f8:	5d 81       	ldd	r21, Y+5	; 0x05
     4fa:	42 30       	cpi	r20, 0x02	; 2
     4fc:	51 05       	cpc	r21, r1
     4fe:	b9 f1       	breq	.+110    	; 0x56e <GPIO_readPin+0xc6>
     500:	8c 81       	ldd	r24, Y+4	; 0x04
     502:	9d 81       	ldd	r25, Y+5	; 0x05
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <GPIO_readPin+0x64>
     50a:	49 c0       	rjmp	.+146    	; 0x59e <GPIO_readPin+0xf6>
     50c:	5f c0       	rjmp	.+190    	; 0x5cc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     50e:	e9 e3       	ldi	r30, 0x39	; 57
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	28 2f       	mov	r18, r24
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a9 01       	movw	r20, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_readPin+0x7e>
     522:	55 95       	asr	r21
     524:	47 95       	ror	r20
     526:	8a 95       	dec	r24
     528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_readPin+0x7a>
     52a:	ca 01       	movw	r24, r20
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	88 23       	and	r24, r24
     532:	19 f0       	breq	.+6      	; 0x53a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	49 c0       	rjmp	.+146    	; 0x5cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     53a:	19 82       	std	Y+1, r1	; 0x01
     53c:	47 c0       	rjmp	.+142    	; 0x5cc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     53e:	e6 e3       	ldi	r30, 0x36	; 54
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	28 2f       	mov	r18, r24
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	8b 81       	ldd	r24, Y+3	; 0x03
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a9 01       	movw	r20, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <GPIO_readPin+0xae>
     552:	55 95       	asr	r21
     554:	47 95       	ror	r20
     556:	8a 95       	dec	r24
     558:	e2 f7       	brpl	.-8      	; 0x552 <GPIO_readPin+0xaa>
     55a:	ca 01       	movw	r24, r20
     55c:	81 70       	andi	r24, 0x01	; 1
     55e:	90 70       	andi	r25, 0x00	; 0
     560:	88 23       	and	r24, r24
     562:	19 f0       	breq	.+6      	; 0x56a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	89 83       	std	Y+1, r24	; 0x01
     568:	31 c0       	rjmp	.+98     	; 0x5cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     56a:	19 82       	std	Y+1, r1	; 0x01
     56c:	2f c0       	rjmp	.+94     	; 0x5cc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     56e:	e3 e3       	ldi	r30, 0x33	; 51
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	28 2f       	mov	r18, r24
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	88 2f       	mov	r24, r24
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a9 01       	movw	r20, r18
     580:	02 c0       	rjmp	.+4      	; 0x586 <GPIO_readPin+0xde>
     582:	55 95       	asr	r21
     584:	47 95       	ror	r20
     586:	8a 95       	dec	r24
     588:	e2 f7       	brpl	.-8      	; 0x582 <GPIO_readPin+0xda>
     58a:	ca 01       	movw	r24, r20
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	90 70       	andi	r25, 0x00	; 0
     590:	88 23       	and	r24, r24
     592:	19 f0       	breq	.+6      	; 0x59a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	19 c0       	rjmp	.+50     	; 0x5cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     59a:	19 82       	std	Y+1, r1	; 0x01
     59c:	17 c0       	rjmp	.+46     	; 0x5cc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     59e:	e0 e3       	ldi	r30, 0x30	; 48
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	88 2f       	mov	r24, r24
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a9 01       	movw	r20, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <GPIO_readPin+0x10e>
     5b2:	55 95       	asr	r21
     5b4:	47 95       	ror	r20
     5b6:	8a 95       	dec	r24
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <GPIO_readPin+0x10a>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	88 23       	and	r24, r24
     5c2:	19 f0       	breq	.+6      	; 0x5ca <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     5ca:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	cf 91       	pop	r28
     5da:	df 91       	pop	r29
     5dc:	08 95       	ret

000005de <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     5de:	df 93       	push	r29
     5e0:	cf 93       	push	r28
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <GPIO_setupPortDirection+0x6>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <GPIO_setupPortDirection+0x8>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	89 83       	std	Y+1, r24	; 0x01
     5ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	84 30       	cpi	r24, 0x04	; 4
     5f2:	90 f5       	brcc	.+100    	; 0x658 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	3c 83       	std	Y+4, r19	; 0x04
     5fc:	2b 83       	std	Y+3, r18	; 0x03
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	91 05       	cpc	r25, r1
     606:	d1 f0       	breq	.+52     	; 0x63c <GPIO_setupPortDirection+0x5e>
     608:	2b 81       	ldd	r18, Y+3	; 0x03
     60a:	3c 81       	ldd	r19, Y+4	; 0x04
     60c:	22 30       	cpi	r18, 0x02	; 2
     60e:	31 05       	cpc	r19, r1
     610:	2c f4       	brge	.+10     	; 0x61c <GPIO_setupPortDirection+0x3e>
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	9c 81       	ldd	r25, Y+4	; 0x04
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	61 f0       	breq	.+24     	; 0x632 <GPIO_setupPortDirection+0x54>
     61a:	1e c0       	rjmp	.+60     	; 0x658 <GPIO_setupPortDirection+0x7a>
     61c:	2b 81       	ldd	r18, Y+3	; 0x03
     61e:	3c 81       	ldd	r19, Y+4	; 0x04
     620:	22 30       	cpi	r18, 0x02	; 2
     622:	31 05       	cpc	r19, r1
     624:	81 f0       	breq	.+32     	; 0x646 <GPIO_setupPortDirection+0x68>
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	83 30       	cpi	r24, 0x03	; 3
     62c:	91 05       	cpc	r25, r1
     62e:	81 f0       	breq	.+32     	; 0x650 <GPIO_setupPortDirection+0x72>
     630:	13 c0       	rjmp	.+38     	; 0x658 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     632:	ea e3       	ldi	r30, 0x3A	; 58
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	80 83       	st	Z, r24
     63a:	0e c0       	rjmp	.+28     	; 0x658 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     63c:	e7 e3       	ldi	r30, 0x37	; 55
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	80 83       	st	Z, r24
     644:	09 c0       	rjmp	.+18     	; 0x658 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     646:	e4 e3       	ldi	r30, 0x34	; 52
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	80 83       	st	Z, r24
     64e:	04 c0       	rjmp	.+8      	; 0x658 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     650:	e1 e3       	ldi	r30, 0x31	; 49
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	80 83       	st	Z, r24
			break;
		}
	}
}
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	08 95       	ret

00000666 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	00 d0       	rcall	.+0      	; 0x66c <GPIO_writePort+0x6>
     66c:	00 d0       	rcall	.+0      	; 0x66e <GPIO_writePort+0x8>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	84 30       	cpi	r24, 0x04	; 4
     67a:	90 f5       	brcc	.+100    	; 0x6e0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	28 2f       	mov	r18, r24
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	3c 83       	std	Y+4, r19	; 0x04
     684:	2b 83       	std	Y+3, r18	; 0x03
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	91 05       	cpc	r25, r1
     68e:	d1 f0       	breq	.+52     	; 0x6c4 <GPIO_writePort+0x5e>
     690:	2b 81       	ldd	r18, Y+3	; 0x03
     692:	3c 81       	ldd	r19, Y+4	; 0x04
     694:	22 30       	cpi	r18, 0x02	; 2
     696:	31 05       	cpc	r19, r1
     698:	2c f4       	brge	.+10     	; 0x6a4 <GPIO_writePort+0x3e>
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	61 f0       	breq	.+24     	; 0x6ba <GPIO_writePort+0x54>
     6a2:	1e c0       	rjmp	.+60     	; 0x6e0 <GPIO_writePort+0x7a>
     6a4:	2b 81       	ldd	r18, Y+3	; 0x03
     6a6:	3c 81       	ldd	r19, Y+4	; 0x04
     6a8:	22 30       	cpi	r18, 0x02	; 2
     6aa:	31 05       	cpc	r19, r1
     6ac:	81 f0       	breq	.+32     	; 0x6ce <GPIO_writePort+0x68>
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	91 05       	cpc	r25, r1
     6b6:	81 f0       	breq	.+32     	; 0x6d8 <GPIO_writePort+0x72>
     6b8:	13 c0       	rjmp	.+38     	; 0x6e0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     6ba:	eb e3       	ldi	r30, 0x3B	; 59
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	80 83       	st	Z, r24
     6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     6c4:	e8 e3       	ldi	r30, 0x38	; 56
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	80 83       	st	Z, r24
     6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     6ce:	e5 e3       	ldi	r30, 0x35	; 53
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	80 83       	st	Z, r24
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     6d8:	e2 e3       	ldi	r30, 0x32	; 50
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	80 83       	st	Z, r24
			break;
		}
	}
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <GPIO_readPort+0x6>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <GPIO_readPort+0x8>
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     6fc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	84 30       	cpi	r24, 0x04	; 4
     702:	90 f5       	brcc	.+100    	; 0x768 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	28 2f       	mov	r18, r24
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	3c 83       	std	Y+4, r19	; 0x04
     70c:	2b 83       	std	Y+3, r18	; 0x03
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	91 05       	cpc	r25, r1
     716:	d1 f0       	breq	.+52     	; 0x74c <GPIO_readPort+0x5e>
     718:	2b 81       	ldd	r18, Y+3	; 0x03
     71a:	3c 81       	ldd	r19, Y+4	; 0x04
     71c:	22 30       	cpi	r18, 0x02	; 2
     71e:	31 05       	cpc	r19, r1
     720:	2c f4       	brge	.+10     	; 0x72c <GPIO_readPort+0x3e>
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	9c 81       	ldd	r25, Y+4	; 0x04
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	61 f0       	breq	.+24     	; 0x742 <GPIO_readPort+0x54>
     72a:	1e c0       	rjmp	.+60     	; 0x768 <GPIO_readPort+0x7a>
     72c:	2b 81       	ldd	r18, Y+3	; 0x03
     72e:	3c 81       	ldd	r19, Y+4	; 0x04
     730:	22 30       	cpi	r18, 0x02	; 2
     732:	31 05       	cpc	r19, r1
     734:	81 f0       	breq	.+32     	; 0x756 <GPIO_readPort+0x68>
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	83 30       	cpi	r24, 0x03	; 3
     73c:	91 05       	cpc	r25, r1
     73e:	81 f0       	breq	.+32     	; 0x760 <GPIO_readPort+0x72>
     740:	13 c0       	rjmp	.+38     	; 0x768 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     742:	e9 e3       	ldi	r30, 0x39	; 57
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	0e c0       	rjmp	.+28     	; 0x768 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     74c:	e6 e3       	ldi	r30, 0x36	; 54
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	09 c0       	rjmp	.+18     	; 0x768 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     756:	e3 e3       	ldi	r30, 0x33	; 51
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	04 c0       	rjmp	.+8      	; 0x768 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     760:	e0 e3       	ldi	r30, 0x30	; 48
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     768:	89 81       	ldd	r24, Y+1	; 0x01
}
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	2e 97       	sbiw	r28, 0x0e	; 14
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	64 e0       	ldi	r22, 0x04	; 4
     790:	41 e0       	ldi	r20, 0x01	; 1
     792:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	65 e0       	ldi	r22, 0x05	; 5
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_setupPinDirection>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	a0 ea       	ldi	r26, 0xA0	; 160
     7a6:	b1 e4       	ldi	r27, 0x41	; 65
     7a8:	8b 87       	std	Y+11, r24	; 0x0b
     7aa:	9c 87       	std	Y+12, r25	; 0x0c
     7ac:	ad 87       	std	Y+13, r26	; 0x0d
     7ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7b0:	6b 85       	ldd	r22, Y+11	; 0x0b
     7b2:	7c 85       	ldd	r23, Y+12	; 0x0c
     7b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b6:	9e 85       	ldd	r25, Y+14	; 0x0e
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	4a e7       	ldi	r20, 0x7A	; 122
     7be:	53 e4       	ldi	r21, 0x43	; 67
     7c0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	8f 83       	std	Y+7, r24	; 0x07
     7ca:	98 87       	std	Y+8, r25	; 0x08
     7cc:	a9 87       	std	Y+9, r26	; 0x09
     7ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7d0:	6f 81       	ldd	r22, Y+7	; 0x07
     7d2:	78 85       	ldd	r23, Y+8	; 0x08
     7d4:	89 85       	ldd	r24, Y+9	; 0x09
     7d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	2c f4       	brge	.+10     	; 0x7f2 <LCD_init+0x7a>
		__ticks = 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9e 83       	std	Y+6, r25	; 0x06
     7ee:	8d 83       	std	Y+5, r24	; 0x05
     7f0:	3f c0       	rjmp	.+126    	; 0x870 <LCD_init+0xf8>
	else if (__tmp > 65535)
     7f2:	6f 81       	ldd	r22, Y+7	; 0x07
     7f4:	78 85       	ldd	r23, Y+8	; 0x08
     7f6:	89 85       	ldd	r24, Y+9	; 0x09
     7f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	3f ef       	ldi	r19, 0xFF	; 255
     7fe:	4f e7       	ldi	r20, 0x7F	; 127
     800:	57 e4       	ldi	r21, 0x47	; 71
     802:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     806:	18 16       	cp	r1, r24
     808:	4c f5       	brge	.+82     	; 0x85c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80a:	6b 85       	ldd	r22, Y+11	; 0x0b
     80c:	7c 85       	ldd	r23, Y+12	; 0x0c
     80e:	8d 85       	ldd	r24, Y+13	; 0x0d
     810:	9e 85       	ldd	r25, Y+14	; 0x0e
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e2       	ldi	r20, 0x20	; 32
     818:	51 e4       	ldi	r21, 0x41	; 65
     81a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	9e 83       	std	Y+6, r25	; 0x06
     830:	8d 83       	std	Y+5, r24	; 0x05
     832:	0f c0       	rjmp	.+30     	; 0x852 <LCD_init+0xda>
     834:	89 e1       	ldi	r24, 0x19	; 25
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	9c 81       	ldd	r25, Y+4	; 0x04
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <LCD_init+0xc8>
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	9e 83       	std	Y+6, r25	; 0x06
     850:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     852:	8d 81       	ldd	r24, Y+5	; 0x05
     854:	9e 81       	ldd	r25, Y+6	; 0x06
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	69 f7       	brne	.-38     	; 0x834 <LCD_init+0xbc>
     85a:	14 c0       	rjmp	.+40     	; 0x884 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     85c:	6f 81       	ldd	r22, Y+7	; 0x07
     85e:	78 85       	ldd	r23, Y+8	; 0x08
     860:	89 85       	ldd	r24, Y+9	; 0x09
     862:	9a 85       	ldd	r25, Y+10	; 0x0a
     864:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	9e 83       	std	Y+6, r25	; 0x06
     86e:	8d 83       	std	Y+5, r24	; 0x05
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	9e 81       	ldd	r25, Y+6	; 0x06
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <LCD_init+0x104>
     880:	9a 83       	std	Y+2, r25	; 0x02
     882:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	0e 94 ef 02 	call	0x5de	; 0x5de <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     88c:	88 e3       	ldi	r24, 0x38	; 56
     88e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     892:	8c e0       	ldi	r24, 0x0C	; 12
     894:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
}
     89e:	2e 96       	adiw	r28, 0x0e	; 14
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	cf 91       	pop	r28
     8ac:	df 91       	pop	r29
     8ae:	08 95       	ret

000008b0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     8b0:	df 93       	push	r29
     8b2:	cf 93       	push	r28
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	e9 97       	sbiw	r28, 0x39	; 57
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	64 e0       	ldi	r22, 0x04	; 4
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	a0 e8       	ldi	r26, 0x80	; 128
     8d6:	bf e3       	ldi	r27, 0x3F	; 63
     8d8:	8d ab       	std	Y+53, r24	; 0x35
     8da:	9e ab       	std	Y+54, r25	; 0x36
     8dc:	af ab       	std	Y+55, r26	; 0x37
     8de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8e0:	6d a9       	ldd	r22, Y+53	; 0x35
     8e2:	7e a9       	ldd	r23, Y+54	; 0x36
     8e4:	8f a9       	ldd	r24, Y+55	; 0x37
     8e6:	98 ad       	ldd	r25, Y+56	; 0x38
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	4a e7       	ldi	r20, 0x7A	; 122
     8ee:	53 e4       	ldi	r21, 0x43	; 67
     8f0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	89 ab       	std	Y+49, r24	; 0x31
     8fa:	9a ab       	std	Y+50, r25	; 0x32
     8fc:	ab ab       	std	Y+51, r26	; 0x33
     8fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     900:	69 a9       	ldd	r22, Y+49	; 0x31
     902:	7a a9       	ldd	r23, Y+50	; 0x32
     904:	8b a9       	ldd	r24, Y+51	; 0x33
     906:	9c a9       	ldd	r25, Y+52	; 0x34
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e8       	ldi	r20, 0x80	; 128
     90e:	5f e3       	ldi	r21, 0x3F	; 63
     910:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     914:	88 23       	and	r24, r24
     916:	2c f4       	brge	.+10     	; 0x922 <LCD_sendCommand+0x72>
		__ticks = 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	98 ab       	std	Y+48, r25	; 0x30
     91e:	8f a7       	std	Y+47, r24	; 0x2f
     920:	3f c0       	rjmp	.+126    	; 0x9a0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     922:	69 a9       	ldd	r22, Y+49	; 0x31
     924:	7a a9       	ldd	r23, Y+50	; 0x32
     926:	8b a9       	ldd	r24, Y+51	; 0x33
     928:	9c a9       	ldd	r25, Y+52	; 0x34
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	3f ef       	ldi	r19, 0xFF	; 255
     92e:	4f e7       	ldi	r20, 0x7F	; 127
     930:	57 e4       	ldi	r21, 0x47	; 71
     932:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     936:	18 16       	cp	r1, r24
     938:	4c f5       	brge	.+82     	; 0x98c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93a:	6d a9       	ldd	r22, Y+53	; 0x35
     93c:	7e a9       	ldd	r23, Y+54	; 0x36
     93e:	8f a9       	ldd	r24, Y+55	; 0x37
     940:	98 ad       	ldd	r25, Y+56	; 0x38
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	98 ab       	std	Y+48, r25	; 0x30
     960:	8f a7       	std	Y+47, r24	; 0x2f
     962:	0f c0       	rjmp	.+30     	; 0x982 <LCD_sendCommand+0xd2>
     964:	89 e1       	ldi	r24, 0x19	; 25
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	9e a7       	std	Y+46, r25	; 0x2e
     96a:	8d a7       	std	Y+45, r24	; 0x2d
     96c:	8d a5       	ldd	r24, Y+45	; 0x2d
     96e:	9e a5       	ldd	r25, Y+46	; 0x2e
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <LCD_sendCommand+0xc0>
     974:	9e a7       	std	Y+46, r25	; 0x2e
     976:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     978:	8f a5       	ldd	r24, Y+47	; 0x2f
     97a:	98 a9       	ldd	r25, Y+48	; 0x30
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	98 ab       	std	Y+48, r25	; 0x30
     980:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     982:	8f a5       	ldd	r24, Y+47	; 0x2f
     984:	98 a9       	ldd	r25, Y+48	; 0x30
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	69 f7       	brne	.-38     	; 0x964 <LCD_sendCommand+0xb4>
     98a:	14 c0       	rjmp	.+40     	; 0x9b4 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     98c:	69 a9       	ldd	r22, Y+49	; 0x31
     98e:	7a a9       	ldd	r23, Y+50	; 0x32
     990:	8b a9       	ldd	r24, Y+51	; 0x33
     992:	9c a9       	ldd	r25, Y+52	; 0x34
     994:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	98 ab       	std	Y+48, r25	; 0x30
     99e:	8f a7       	std	Y+47, r24	; 0x2f
     9a0:	8f a5       	ldd	r24, Y+47	; 0x2f
     9a2:	98 a9       	ldd	r25, Y+48	; 0x30
     9a4:	9c a7       	std	Y+44, r25	; 0x2c
     9a6:	8b a7       	std	Y+43, r24	; 0x2b
     9a8:	8b a5       	ldd	r24, Y+43	; 0x2b
     9aa:	9c a5       	ldd	r25, Y+44	; 0x2c
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <LCD_sendCommand+0xfc>
     9b0:	9c a7       	std	Y+44, r25	; 0x2c
     9b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	65 e0       	ldi	r22, 0x05	; 5
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	a0 e8       	ldi	r26, 0x80	; 128
     9c4:	bf e3       	ldi	r27, 0x3F	; 63
     9c6:	8f a3       	std	Y+39, r24	; 0x27
     9c8:	98 a7       	std	Y+40, r25	; 0x28
     9ca:	a9 a7       	std	Y+41, r26	; 0x29
     9cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9ce:	6f a1       	ldd	r22, Y+39	; 0x27
     9d0:	78 a5       	ldd	r23, Y+40	; 0x28
     9d2:	89 a5       	ldd	r24, Y+41	; 0x29
     9d4:	9a a5       	ldd	r25, Y+42	; 0x2a
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	4a e7       	ldi	r20, 0x7A	; 122
     9dc:	53 e4       	ldi	r21, 0x43	; 67
     9de:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	8b a3       	std	Y+35, r24	; 0x23
     9e8:	9c a3       	std	Y+36, r25	; 0x24
     9ea:	ad a3       	std	Y+37, r26	; 0x25
     9ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     9ee:	6b a1       	ldd	r22, Y+35	; 0x23
     9f0:	7c a1       	ldd	r23, Y+36	; 0x24
     9f2:	8d a1       	ldd	r24, Y+37	; 0x25
     9f4:	9e a1       	ldd	r25, Y+38	; 0x26
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e8       	ldi	r20, 0x80	; 128
     9fc:	5f e3       	ldi	r21, 0x3F	; 63
     9fe:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     a02:	88 23       	and	r24, r24
     a04:	2c f4       	brge	.+10     	; 0xa10 <LCD_sendCommand+0x160>
		__ticks = 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	9a a3       	std	Y+34, r25	; 0x22
     a0c:	89 a3       	std	Y+33, r24	; 0x21
     a0e:	3f c0       	rjmp	.+126    	; 0xa8e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
     a10:	6b a1       	ldd	r22, Y+35	; 0x23
     a12:	7c a1       	ldd	r23, Y+36	; 0x24
     a14:	8d a1       	ldd	r24, Y+37	; 0x25
     a16:	9e a1       	ldd	r25, Y+38	; 0x26
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	3f ef       	ldi	r19, 0xFF	; 255
     a1c:	4f e7       	ldi	r20, 0x7F	; 127
     a1e:	57 e4       	ldi	r21, 0x47	; 71
     a20:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     a24:	18 16       	cp	r1, r24
     a26:	4c f5       	brge	.+82     	; 0xa7a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a28:	6f a1       	ldd	r22, Y+39	; 0x27
     a2a:	78 a5       	ldd	r23, Y+40	; 0x28
     a2c:	89 a5       	ldd	r24, Y+41	; 0x29
     a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e2       	ldi	r20, 0x20	; 32
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	bc 01       	movw	r22, r24
     a42:	cd 01       	movw	r24, r26
     a44:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	9a a3       	std	Y+34, r25	; 0x22
     a4e:	89 a3       	std	Y+33, r24	; 0x21
     a50:	0f c0       	rjmp	.+30     	; 0xa70 <LCD_sendCommand+0x1c0>
     a52:	89 e1       	ldi	r24, 0x19	; 25
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	98 a3       	std	Y+32, r25	; 0x20
     a58:	8f 8f       	std	Y+31, r24	; 0x1f
     a5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a5c:	98 a1       	ldd	r25, Y+32	; 0x20
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCD_sendCommand+0x1ae>
     a62:	98 a3       	std	Y+32, r25	; 0x20
     a64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a66:	89 a1       	ldd	r24, Y+33	; 0x21
     a68:	9a a1       	ldd	r25, Y+34	; 0x22
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	9a a3       	std	Y+34, r25	; 0x22
     a6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a70:	89 a1       	ldd	r24, Y+33	; 0x21
     a72:	9a a1       	ldd	r25, Y+34	; 0x22
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	69 f7       	brne	.-38     	; 0xa52 <LCD_sendCommand+0x1a2>
     a78:	14 c0       	rjmp	.+40     	; 0xaa2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a7a:	6b a1       	ldd	r22, Y+35	; 0x23
     a7c:	7c a1       	ldd	r23, Y+36	; 0x24
     a7e:	8d a1       	ldd	r24, Y+37	; 0x25
     a80:	9e a1       	ldd	r25, Y+38	; 0x26
     a82:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	9a a3       	std	Y+34, r25	; 0x22
     a8c:	89 a3       	std	Y+33, r24	; 0x21
     a8e:	89 a1       	ldd	r24, Y+33	; 0x21
     a90:	9a a1       	ldd	r25, Y+34	; 0x22
     a92:	9e 8f       	std	Y+30, r25	; 0x1e
     a94:	8d 8f       	std	Y+29, r24	; 0x1d
     a96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a98:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <LCD_sendCommand+0x1ea>
     a9e:	9e 8f       	std	Y+30, r25	; 0x1e
     aa0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	69 ad       	ldd	r22, Y+57	; 0x39
     aa6:	0e 94 33 03 	call	0x666	; 0x666 <GPIO_writePort>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e8       	ldi	r26, 0x80	; 128
     ab0:	bf e3       	ldi	r27, 0x3F	; 63
     ab2:	89 8f       	std	Y+25, r24	; 0x19
     ab4:	9a 8f       	std	Y+26, r25	; 0x1a
     ab6:	ab 8f       	std	Y+27, r26	; 0x1b
     ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aba:	69 8d       	ldd	r22, Y+25	; 0x19
     abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	4a e7       	ldi	r20, 0x7A	; 122
     ac8:	53 e4       	ldi	r21, 0x43	; 67
     aca:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     ace:	dc 01       	movw	r26, r24
     ad0:	cb 01       	movw	r24, r22
     ad2:	8d 8b       	std	Y+21, r24	; 0x15
     ad4:	9e 8b       	std	Y+22, r25	; 0x16
     ad6:	af 8b       	std	Y+23, r26	; 0x17
     ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ada:	6d 89       	ldd	r22, Y+21	; 0x15
     adc:	7e 89       	ldd	r23, Y+22	; 0x16
     ade:	8f 89       	ldd	r24, Y+23	; 0x17
     ae0:	98 8d       	ldd	r25, Y+24	; 0x18
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e8       	ldi	r20, 0x80	; 128
     ae8:	5f e3       	ldi	r21, 0x3F	; 63
     aea:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     aee:	88 23       	and	r24, r24
     af0:	2c f4       	brge	.+10     	; 0xafc <LCD_sendCommand+0x24c>
		__ticks = 1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	9c 8b       	std	Y+20, r25	; 0x14
     af8:	8b 8b       	std	Y+19, r24	; 0x13
     afa:	3f c0       	rjmp	.+126    	; 0xb7a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
     afc:	6d 89       	ldd	r22, Y+21	; 0x15
     afe:	7e 89       	ldd	r23, Y+22	; 0x16
     b00:	8f 89       	ldd	r24, Y+23	; 0x17
     b02:	98 8d       	ldd	r25, Y+24	; 0x18
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	4f e7       	ldi	r20, 0x7F	; 127
     b0a:	57 e4       	ldi	r21, 0x47	; 71
     b0c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     b10:	18 16       	cp	r1, r24
     b12:	4c f5       	brge	.+82     	; 0xb66 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b14:	69 8d       	ldd	r22, Y+25	; 0x19
     b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e2       	ldi	r20, 0x20	; 32
     b22:	51 e4       	ldi	r21, 0x41	; 65
     b24:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	9c 8b       	std	Y+20, r25	; 0x14
     b3a:	8b 8b       	std	Y+19, r24	; 0x13
     b3c:	0f c0       	rjmp	.+30     	; 0xb5c <LCD_sendCommand+0x2ac>
     b3e:	89 e1       	ldi	r24, 0x19	; 25
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	9a 8b       	std	Y+18, r25	; 0x12
     b44:	89 8b       	std	Y+17, r24	; 0x11
     b46:	89 89       	ldd	r24, Y+17	; 0x11
     b48:	9a 89       	ldd	r25, Y+18	; 0x12
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <LCD_sendCommand+0x29a>
     b4e:	9a 8b       	std	Y+18, r25	; 0x12
     b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b52:	8b 89       	ldd	r24, Y+19	; 0x13
     b54:	9c 89       	ldd	r25, Y+20	; 0x14
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	9c 8b       	std	Y+20, r25	; 0x14
     b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b5c:	8b 89       	ldd	r24, Y+19	; 0x13
     b5e:	9c 89       	ldd	r25, Y+20	; 0x14
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	69 f7       	brne	.-38     	; 0xb3e <LCD_sendCommand+0x28e>
     b64:	14 c0       	rjmp	.+40     	; 0xb8e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b66:	6d 89       	ldd	r22, Y+21	; 0x15
     b68:	7e 89       	ldd	r23, Y+22	; 0x16
     b6a:	8f 89       	ldd	r24, Y+23	; 0x17
     b6c:	98 8d       	ldd	r25, Y+24	; 0x18
     b6e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	9c 8b       	std	Y+20, r25	; 0x14
     b78:	8b 8b       	std	Y+19, r24	; 0x13
     b7a:	8b 89       	ldd	r24, Y+19	; 0x13
     b7c:	9c 89       	ldd	r25, Y+20	; 0x14
     b7e:	98 8b       	std	Y+16, r25	; 0x10
     b80:	8f 87       	std	Y+15, r24	; 0x0f
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	98 89       	ldd	r25, Y+16	; 0x10
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <LCD_sendCommand+0x2d6>
     b8a:	98 8b       	std	Y+16, r25	; 0x10
     b8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	65 e0       	ldi	r22, 0x05	; 5
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e8       	ldi	r26, 0x80	; 128
     b9e:	bf e3       	ldi	r27, 0x3F	; 63
     ba0:	8b 87       	std	Y+11, r24	; 0x0b
     ba2:	9c 87       	std	Y+12, r25	; 0x0c
     ba4:	ad 87       	std	Y+13, r26	; 0x0d
     ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
     baa:	7c 85       	ldd	r23, Y+12	; 0x0c
     bac:	8d 85       	ldd	r24, Y+13	; 0x0d
     bae:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a e7       	ldi	r20, 0x7A	; 122
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	8f 83       	std	Y+7, r24	; 0x07
     bc2:	98 87       	std	Y+8, r25	; 0x08
     bc4:	a9 87       	std	Y+9, r26	; 0x09
     bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc8:	6f 81       	ldd	r22, Y+7	; 0x07
     bca:	78 85       	ldd	r23, Y+8	; 0x08
     bcc:	89 85       	ldd	r24, Y+9	; 0x09
     bce:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     bdc:	88 23       	and	r24, r24
     bde:	2c f4       	brge	.+10     	; 0xbea <LCD_sendCommand+0x33a>
		__ticks = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	9e 83       	std	Y+6, r25	; 0x06
     be6:	8d 83       	std	Y+5, r24	; 0x05
     be8:	3f c0       	rjmp	.+126    	; 0xc68 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
     bea:	6f 81       	ldd	r22, Y+7	; 0x07
     bec:	78 85       	ldd	r23, Y+8	; 0x08
     bee:	89 85       	ldd	r24, Y+9	; 0x09
     bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	4f e7       	ldi	r20, 0x7F	; 127
     bf8:	57 e4       	ldi	r21, 0x47	; 71
     bfa:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     bfe:	18 16       	cp	r1, r24
     c00:	4c f5       	brge	.+82     	; 0xc54 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c02:	6b 85       	ldd	r22, Y+11	; 0x0b
     c04:	7c 85       	ldd	r23, Y+12	; 0x0c
     c06:	8d 85       	ldd	r24, Y+13	; 0x0d
     c08:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
     c2a:	0f c0       	rjmp	.+30     	; 0xc4a <LCD_sendCommand+0x39a>
     c2c:	89 e1       	ldi	r24, 0x19	; 25
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	9c 83       	std	Y+4, r25	; 0x04
     c32:	8b 83       	std	Y+3, r24	; 0x03
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <LCD_sendCommand+0x388>
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c40:	8d 81       	ldd	r24, Y+5	; 0x05
     c42:	9e 81       	ldd	r25, Y+6	; 0x06
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	69 f7       	brne	.-38     	; 0xc2c <LCD_sendCommand+0x37c>
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c54:	6f 81       	ldd	r22, Y+7	; 0x07
     c56:	78 85       	ldd	r23, Y+8	; 0x08
     c58:	89 85       	ldd	r24, Y+9	; 0x09
     c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	9e 83       	std	Y+6, r25	; 0x06
     c66:	8d 83       	std	Y+5, r24	; 0x05
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCD_sendCommand+0x3c4>
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     c7c:	e9 96       	adiw	r28, 0x39	; 57
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	e9 97       	sbiw	r28, 0x39	; 57
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	64 e0       	ldi	r22, 0x04	; 4
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e8       	ldi	r26, 0x80	; 128
     cb4:	bf e3       	ldi	r27, 0x3F	; 63
     cb6:	8d ab       	std	Y+53, r24	; 0x35
     cb8:	9e ab       	std	Y+54, r25	; 0x36
     cba:	af ab       	std	Y+55, r26	; 0x37
     cbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6d a9       	ldd	r22, Y+53	; 0x35
     cc0:	7e a9       	ldd	r23, Y+54	; 0x36
     cc2:	8f a9       	ldd	r24, Y+55	; 0x37
     cc4:	98 ad       	ldd	r25, Y+56	; 0x38
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a e7       	ldi	r20, 0x7A	; 122
     ccc:	53 e4       	ldi	r21, 0x43	; 67
     cce:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	89 ab       	std	Y+49, r24	; 0x31
     cd8:	9a ab       	std	Y+50, r25	; 0x32
     cda:	ab ab       	std	Y+51, r26	; 0x33
     cdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cde:	69 a9       	ldd	r22, Y+49	; 0x31
     ce0:	7a a9       	ldd	r23, Y+50	; 0x32
     ce2:	8b a9       	ldd	r24, Y+51	; 0x33
     ce4:	9c a9       	ldd	r25, Y+52	; 0x34
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <LCD_displayCharacter+0x72>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	98 ab       	std	Y+48, r25	; 0x30
     cfc:	8f a7       	std	Y+47, r24	; 0x2f
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
     d00:	69 a9       	ldd	r22, Y+49	; 0x31
     d02:	7a a9       	ldd	r23, Y+50	; 0x32
     d04:	8b a9       	ldd	r24, Y+51	; 0x33
     d06:	9c a9       	ldd	r25, Y+52	; 0x34
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6d a9       	ldd	r22, Y+53	; 0x35
     d1a:	7e a9       	ldd	r23, Y+54	; 0x36
     d1c:	8f a9       	ldd	r24, Y+55	; 0x37
     d1e:	98 ad       	ldd	r25, Y+56	; 0x38
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	98 ab       	std	Y+48, r25	; 0x30
     d3e:	8f a7       	std	Y+47, r24	; 0x2f
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <LCD_displayCharacter+0xd2>
     d42:	89 e1       	ldi	r24, 0x19	; 25
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9e a7       	std	Y+46, r25	; 0x2e
     d48:	8d a7       	std	Y+45, r24	; 0x2d
     d4a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d4c:	9e a5       	ldd	r25, Y+46	; 0x2e
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <LCD_displayCharacter+0xc0>
     d52:	9e a7       	std	Y+46, r25	; 0x2e
     d54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8f a5       	ldd	r24, Y+47	; 0x2f
     d58:	98 a9       	ldd	r25, Y+48	; 0x30
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	98 ab       	std	Y+48, r25	; 0x30
     d5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8f a5       	ldd	r24, Y+47	; 0x2f
     d62:	98 a9       	ldd	r25, Y+48	; 0x30
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <LCD_displayCharacter+0xb4>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	69 a9       	ldd	r22, Y+49	; 0x31
     d6c:	7a a9       	ldd	r23, Y+50	; 0x32
     d6e:	8b a9       	ldd	r24, Y+51	; 0x33
     d70:	9c a9       	ldd	r25, Y+52	; 0x34
     d72:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	98 ab       	std	Y+48, r25	; 0x30
     d7c:	8f a7       	std	Y+47, r24	; 0x2f
     d7e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d80:	98 a9       	ldd	r25, Y+48	; 0x30
     d82:	9c a7       	std	Y+44, r25	; 0x2c
     d84:	8b a7       	std	Y+43, r24	; 0x2b
     d86:	8b a5       	ldd	r24, Y+43	; 0x2b
     d88:	9c a5       	ldd	r25, Y+44	; 0x2c
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <LCD_displayCharacter+0xfc>
     d8e:	9c a7       	std	Y+44, r25	; 0x2c
     d90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	65 e0       	ldi	r22, 0x05	; 5
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	a0 e8       	ldi	r26, 0x80	; 128
     da2:	bf e3       	ldi	r27, 0x3F	; 63
     da4:	8f a3       	std	Y+39, r24	; 0x27
     da6:	98 a7       	std	Y+40, r25	; 0x28
     da8:	a9 a7       	std	Y+41, r26	; 0x29
     daa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dac:	6f a1       	ldd	r22, Y+39	; 0x27
     dae:	78 a5       	ldd	r23, Y+40	; 0x28
     db0:	89 a5       	ldd	r24, Y+41	; 0x29
     db2:	9a a5       	ldd	r25, Y+42	; 0x2a
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	53 e4       	ldi	r21, 0x43	; 67
     dbc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	8b a3       	std	Y+35, r24	; 0x23
     dc6:	9c a3       	std	Y+36, r25	; 0x24
     dc8:	ad a3       	std	Y+37, r26	; 0x25
     dca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dcc:	6b a1       	ldd	r22, Y+35	; 0x23
     dce:	7c a1       	ldd	r23, Y+36	; 0x24
     dd0:	8d a1       	ldd	r24, Y+37	; 0x25
     dd2:	9e a1       	ldd	r25, Y+38	; 0x26
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     de0:	88 23       	and	r24, r24
     de2:	2c f4       	brge	.+10     	; 0xdee <LCD_displayCharacter+0x160>
		__ticks = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9a a3       	std	Y+34, r25	; 0x22
     dea:	89 a3       	std	Y+33, r24	; 0x21
     dec:	3f c0       	rjmp	.+126    	; 0xe6c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
     dee:	6b a1       	ldd	r22, Y+35	; 0x23
     df0:	7c a1       	ldd	r23, Y+36	; 0x24
     df2:	8d a1       	ldd	r24, Y+37	; 0x25
     df4:	9e a1       	ldd	r25, Y+38	; 0x26
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	4f e7       	ldi	r20, 0x7F	; 127
     dfc:	57 e4       	ldi	r21, 0x47	; 71
     dfe:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     e02:	18 16       	cp	r1, r24
     e04:	4c f5       	brge	.+82     	; 0xe58 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e06:	6f a1       	ldd	r22, Y+39	; 0x27
     e08:	78 a5       	ldd	r23, Y+40	; 0x28
     e0a:	89 a5       	ldd	r24, Y+41	; 0x29
     e0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9a a3       	std	Y+34, r25	; 0x22
     e2c:	89 a3       	std	Y+33, r24	; 0x21
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <LCD_displayCharacter+0x1c0>
     e30:	89 e1       	ldi	r24, 0x19	; 25
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	98 a3       	std	Y+32, r25	; 0x20
     e36:	8f 8f       	std	Y+31, r24	; 0x1f
     e38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e3a:	98 a1       	ldd	r25, Y+32	; 0x20
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <LCD_displayCharacter+0x1ae>
     e40:	98 a3       	std	Y+32, r25	; 0x20
     e42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	89 a1       	ldd	r24, Y+33	; 0x21
     e46:	9a a1       	ldd	r25, Y+34	; 0x22
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	9a a3       	std	Y+34, r25	; 0x22
     e4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	89 a1       	ldd	r24, Y+33	; 0x21
     e50:	9a a1       	ldd	r25, Y+34	; 0x22
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f7       	brne	.-38     	; 0xe30 <LCD_displayCharacter+0x1a2>
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	6b a1       	ldd	r22, Y+35	; 0x23
     e5a:	7c a1       	ldd	r23, Y+36	; 0x24
     e5c:	8d a1       	ldd	r24, Y+37	; 0x25
     e5e:	9e a1       	ldd	r25, Y+38	; 0x26
     e60:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9a a3       	std	Y+34, r25	; 0x22
     e6a:	89 a3       	std	Y+33, r24	; 0x21
     e6c:	89 a1       	ldd	r24, Y+33	; 0x21
     e6e:	9a a1       	ldd	r25, Y+34	; 0x22
     e70:	9e 8f       	std	Y+30, r25	; 0x1e
     e72:	8d 8f       	std	Y+29, r24	; 0x1d
     e74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <LCD_displayCharacter+0x1ea>
     e7c:	9e 8f       	std	Y+30, r25	; 0x1e
     e7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	69 ad       	ldd	r22, Y+57	; 0x39
     e84:	0e 94 33 03 	call	0x666	; 0x666 <GPIO_writePort>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e8       	ldi	r26, 0x80	; 128
     e8e:	bf e3       	ldi	r27, 0x3F	; 63
     e90:	89 8f       	std	Y+25, r24	; 0x19
     e92:	9a 8f       	std	Y+26, r25	; 0x1a
     e94:	ab 8f       	std	Y+27, r26	; 0x1b
     e96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	69 8d       	ldd	r22, Y+25	; 0x19
     e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a e7       	ldi	r20, 0x7A	; 122
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	8d 8b       	std	Y+21, r24	; 0x15
     eb2:	9e 8b       	std	Y+22, r25	; 0x16
     eb4:	af 8b       	std	Y+23, r26	; 0x17
     eb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eb8:	6d 89       	ldd	r22, Y+21	; 0x15
     eba:	7e 89       	ldd	r23, Y+22	; 0x16
     ebc:	8f 89       	ldd	r24, Y+23	; 0x17
     ebe:	98 8d       	ldd	r25, Y+24	; 0x18
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <LCD_displayCharacter+0x24c>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 8b       	std	Y+20, r25	; 0x14
     ed6:	8b 8b       	std	Y+19, r24	; 0x13
     ed8:	3f c0       	rjmp	.+126    	; 0xf58 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
     eda:	6d 89       	ldd	r22, Y+21	; 0x15
     edc:	7e 89       	ldd	r23, Y+22	; 0x16
     ede:	8f 89       	ldd	r24, Y+23	; 0x17
     ee0:	98 8d       	ldd	r25, Y+24	; 0x18
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	57 e4       	ldi	r21, 0x47	; 71
     eea:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	4c f5       	brge	.+82     	; 0xf44 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	69 8d       	ldd	r22, Y+25	; 0x19
     ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9c 8b       	std	Y+20, r25	; 0x14
     f18:	8b 8b       	std	Y+19, r24	; 0x13
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <LCD_displayCharacter+0x2ac>
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9a 8b       	std	Y+18, r25	; 0x12
     f22:	89 8b       	std	Y+17, r24	; 0x11
     f24:	89 89       	ldd	r24, Y+17	; 0x11
     f26:	9a 89       	ldd	r25, Y+18	; 0x12
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <LCD_displayCharacter+0x29a>
     f2c:	9a 8b       	std	Y+18, r25	; 0x12
     f2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f30:	8b 89       	ldd	r24, Y+19	; 0x13
     f32:	9c 89       	ldd	r25, Y+20	; 0x14
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	8b 89       	ldd	r24, Y+19	; 0x13
     f3c:	9c 89       	ldd	r25, Y+20	; 0x14
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	69 f7       	brne	.-38     	; 0xf1c <LCD_displayCharacter+0x28e>
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	6d 89       	ldd	r22, Y+21	; 0x15
     f46:	7e 89       	ldd	r23, Y+22	; 0x16
     f48:	8f 89       	ldd	r24, Y+23	; 0x17
     f4a:	98 8d       	ldd	r25, Y+24	; 0x18
     f4c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9c 8b       	std	Y+20, r25	; 0x14
     f56:	8b 8b       	std	Y+19, r24	; 0x13
     f58:	8b 89       	ldd	r24, Y+19	; 0x13
     f5a:	9c 89       	ldd	r25, Y+20	; 0x14
     f5c:	98 8b       	std	Y+16, r25	; 0x10
     f5e:	8f 87       	std	Y+15, r24	; 0x0f
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	98 89       	ldd	r25, Y+16	; 0x10
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <LCD_displayCharacter+0x2d6>
     f68:	98 8b       	std	Y+16, r25	; 0x10
     f6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	65 e0       	ldi	r22, 0x05	; 5
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_writePin>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a0 e8       	ldi	r26, 0x80	; 128
     f7c:	bf e3       	ldi	r27, 0x3F	; 63
     f7e:	8b 87       	std	Y+11, r24	; 0x0b
     f80:	9c 87       	std	Y+12, r25	; 0x0c
     f82:	ad 87       	std	Y+13, r26	; 0x0d
     f84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4a e7       	ldi	r20, 0x7A	; 122
     f94:	53 e4       	ldi	r21, 0x43	; 67
     f96:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	8f 83       	std	Y+7, r24	; 0x07
     fa0:	98 87       	std	Y+8, r25	; 0x08
     fa2:	a9 87       	std	Y+9, r26	; 0x09
     fa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e8       	ldi	r20, 0x80	; 128
     fb4:	5f e3       	ldi	r21, 0x3F	; 63
     fb6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__ltsf2>
     fba:	88 23       	and	r24, r24
     fbc:	2c f4       	brge	.+10     	; 0xfc8 <LCD_displayCharacter+0x33a>
		__ticks = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	3f c0       	rjmp	.+126    	; 0x1046 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
     fc8:	6f 81       	ldd	r22, Y+7	; 0x07
     fca:	78 85       	ldd	r23, Y+8	; 0x08
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	4f e7       	ldi	r20, 0x7F	; 127
     fd6:	57 e4       	ldi	r21, 0x47	; 71
     fd8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__gtsf2>
     fdc:	18 16       	cp	r1, r24
     fde:	4c f5       	brge	.+82     	; 0x1032 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <LCD_displayCharacter+0x39a>
    100a:	89 e1       	ldi	r24, 0x19	; 25
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <LCD_displayCharacter+0x388>
    101a:	9c 83       	std	Y+4, r25	; 0x04
    101c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f7       	brne	.-38     	; 0x100a <LCD_displayCharacter+0x37c>
    1030:	14 c0       	rjmp	.+40     	; 0x105a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1032:	6f 81       	ldd	r22, Y+7	; 0x07
    1034:	78 85       	ldd	r23, Y+8	; 0x08
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <LCD_displayCharacter+0x3c4>
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    105a:	e9 96       	adiw	r28, 0x39	; 57
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <LCD_displayString+0x6>
    1072:	0f 92       	push	r0
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9b 83       	std	Y+3, r25	; 0x03
    107a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    107c:	19 82       	std	Y+1, r1	; 0x01
    107e:	0e c0       	rjmp	.+28     	; 0x109c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
    108a:	fc 01       	movw	r30, r24
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	80 81       	ld	r24, Z
    1092:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_displayCharacter>
		i++;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	fc 01       	movw	r30, r24
    10a8:	e2 0f       	add	r30, r18
    10aa:	f3 1f       	adc	r31, r19
    10ac:	80 81       	ld	r24, Z
    10ae:	88 23       	and	r24, r24
    10b0:	39 f7       	brne	.-50     	; 0x1080 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <LCD_moveCursor+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <LCD_moveCursor+0x8>
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3d 83       	std	Y+5, r19	; 0x05
    10d8:	2c 83       	std	Y+4, r18	; 0x04
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	91 05       	cpc	r25, r1
    10e2:	c1 f0       	breq	.+48     	; 0x1114 <LCD_moveCursor+0x56>
    10e4:	2c 81       	ldd	r18, Y+4	; 0x04
    10e6:	3d 81       	ldd	r19, Y+5	; 0x05
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <LCD_moveCursor+0x3a>
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	9d 81       	ldd	r25, Y+5	; 0x05
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	61 f0       	breq	.+24     	; 0x110e <LCD_moveCursor+0x50>
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <LCD_moveCursor+0x6c>
    10f8:	2c 81       	ldd	r18, Y+4	; 0x04
    10fa:	3d 81       	ldd	r19, Y+5	; 0x05
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	69 f0       	breq	.+26     	; 0x111c <LCD_moveCursor+0x5e>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	61 f0       	breq	.+24     	; 0x1124 <LCD_moveCursor+0x66>
    110c:	0e c0       	rjmp	.+28     	; 0x112a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	0b c0       	rjmp	.+22     	; 0x112a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	80 5c       	subi	r24, 0xC0	; 192
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	07 c0       	rjmp	.+14     	; 0x112a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	80 5f       	subi	r24, 0xF0	; 240
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	03 c0       	rjmp	.+6      	; 0x112a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	80 5b       	subi	r24, 0xB0	; 176
    1128:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	80 68       	ori	r24, 0x80	; 128
    112e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <LCD_displayStringRowColumn+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <LCD_displayStringRowColumn+0x8>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6a 83       	std	Y+2, r22	; 0x02
    1152:	5c 83       	std	Y+4, r21	; 0x04
    1154:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	6a 81       	ldd	r22, Y+2	; 0x02
    115a:	0e 94 5f 08 	call	0x10be	; 0x10be <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	0e 94 36 08 	call	0x106c	; 0x106c <LCD_displayString>
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	62 97       	sbiw	r28, 0x12	; 18
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	9a 8b       	std	Y+18, r25	; 0x12
    118a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    118c:	89 89       	ldd	r24, Y+17	; 0x11
    118e:	9a 89       	ldd	r25, Y+18	; 0x12
    1190:	9e 01       	movw	r18, r28
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	b9 01       	movw	r22, r18
    1198:	4a e0       	ldi	r20, 0x0A	; 10
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	0e 94 09 10 	call	0x2012	; 0x2012 <itoa>
   LCD_displayString(buff); /* Display the string */
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 36 08 	call	0x106c	; 0x106c <LCD_displayString>
}
    11a8:	62 96       	adiw	r28, 0x12	; 18
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <main>:
#include"Buzzer.h"
#include "UART.h"
#include "avr/io.h"

int main(void)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <main+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	Buzzer_LED();
    11d8:	0e 94 41 00 	call	0x82	; 0x82 <Buzzer_LED>
	LCD_init();
    11dc:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_init>
	UART_init(9600);
    11e0:	60 e8       	ldi	r22, 0x80	; 128
    11e2:	75 e2       	ldi	r23, 0x25	; 37
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 4c 09 	call	0x1298	; 0x1298 <UART_init>
	uint8 temp=0,past_Temp=0;
    11ec:	1a 82       	std	Y+2, r1	; 0x02
    11ee:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		temp = recieve ();
    11f0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <recieve>
    11f4:	8a 83       	std	Y+2, r24	; 0x02
		if(temp!=past_Temp)
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	98 17       	cp	r25, r24
    11fc:	09 f4       	brne	.+2      	; 0x1200 <main+0x32>
    11fe:	49 c0       	rjmp	.+146    	; 0x1292 <main+0xc4>
		{
			if(temp<60)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	8c 33       	cpi	r24, 0x3C	; 60
    1204:	f0 f4       	brcc	.+60     	; 0x1242 <main+0x74>
			{
				LCD_clearScreen();
    1206:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_clearScreen>
				LCD_displayStringRowColumn(0,3,"FAN IS OFF");
    120a:	20 e6       	ldi	r18, 0x60	; 96
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	63 e0       	ldi	r22, 0x03	; 3
    1212:	a9 01       	movw	r20, r18
    1214:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,3,"Temp = ");
    1218:	2b e6       	ldi	r18, 0x6B	; 107
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	63 e0       	ldi	r22, 0x03	; 3
    1220:	a9 01       	movw	r20, r18
    1222:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_displayStringRowColumn>
				LCD_intgerToString(temp);
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_intgerToString>
				LCD_displayCharacter(0xDF);
    1230:	8f ed       	ldi	r24, 0xDF	; 223
    1232:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_displayCharacter>
				LCD_displayCharacter('C');
    1236:	83 e4       	ldi	r24, 0x43	; 67
    1238:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_displayCharacter>
				STOP();
    123c:	0e 94 6d 00 	call	0xda	; 0xda <STOP>
    1240:	28 c0       	rjmp	.+80     	; 0x1292 <main+0xc4>
			}

			else if (temp==60)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	8c 33       	cpi	r24, 0x3C	; 60
    1246:	99 f4       	brne	.+38     	; 0x126e <main+0xa0>
			{
				LCD_clearScreen();
    1248:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_clearScreen>
				LCD_displayStringRowColumn(0,3,"FAN IS ON");
    124c:	23 e7       	ldi	r18, 0x73	; 115
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	a9 01       	movw	r20, r18
    1256:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(0,2,"7are2aaaaaaaa");
    125a:	2d e7       	ldi	r18, 0x7D	; 125
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	a9 01       	movw	r20, r18
    1264:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_displayStringRowColumn>
				/*buzzer and LED*/
				RUN();
    1268:	0e 94 5c 00 	call	0xb8	; 0xb8 <RUN>
    126c:	12 c0       	rjmp	.+36     	; 0x1292 <main+0xc4>
			}

			else
			{
				LCD_clearScreen();
    126e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_clearScreen>
				LCD_displayStringRowColumn(0,3,"FAN IS ON");
    1272:	23 e7       	ldi	r18, 0x73	; 115
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	63 e0       	ldi	r22, 0x03	; 3
    127a:	a9 01       	movw	r20, r18
    127c:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,2,"7are2aaaaaaaa");
    1280:	2d e7       	ldi	r18, 0x7D	; 125
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	62 e0       	ldi	r22, 0x02	; 2
    1288:	a9 01       	movw	r20, r18
    128a:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCD_displayStringRowColumn>
				/*buzzer and LED*/
				RUN();
    128e:	0e 94 5c 00 	call	0xb8	; 0xb8 <RUN>
			}

		}
		past_Temp=temp;
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	ac cf       	rjmp	.-168    	; 0x11f0 <main+0x22>

00001298 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <UART_init+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <UART_init+0x8>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <UART_init+0xa>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	6b 83       	std	Y+3, r22	; 0x03
    12a8:	7c 83       	std	Y+4, r23	; 0x04
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    12ae:	1a 82       	std	Y+2, r1	; 0x02
    12b0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    12b2:	eb e2       	ldi	r30, 0x2B	; 43
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    12ba:	ea e2       	ldi	r30, 0x2A	; 42
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	88 e1       	ldi	r24, 0x18	; 24
    12c0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    12c2:	e0 e4       	ldi	r30, 0x40	; 64
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	86 e8       	ldi	r24, 0x86	; 134
    12c8:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	ad 81       	ldd	r26, Y+5	; 0x05
    12d0:	be 81       	ldd	r27, Y+6	; 0x06
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	aa 1f       	adc	r26, r26
    12e0:	bb 1f       	adc	r27, r27
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	aa 1f       	adc	r26, r26
    12e8:	bb 1f       	adc	r27, r27
    12ea:	9c 01       	movw	r18, r24
    12ec:	ad 01       	movw	r20, r26
    12ee:	80 e4       	ldi	r24, 0x40	; 64
    12f0:	92 e4       	ldi	r25, 0x42	; 66
    12f2:	af e0       	ldi	r26, 0x0F	; 15
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__udivmodsi4>
    12fe:	da 01       	movw	r26, r20
    1300:	c9 01       	movw	r24, r18
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1308:	e0 e4       	ldi	r30, 0x40	; 64
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	89 2f       	mov	r24, r25
    1312:	99 27       	eor	r25, r25
    1314:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1316:	e9 e2       	ldi	r30, 0x29	; 41
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	80 83       	st	Z, r24
}
    131e:	26 96       	adiw	r28, 0x06	; 6
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    133c:	eb e2       	ldi	r30, 0x2B	; 43
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	80 72       	andi	r24, 0x20	; 32
    1348:	90 70       	andi	r25, 0x00	; 0
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	b9 f3       	breq	.-18     	; 0x133c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    134e:	ec e2       	ldi	r30, 0x2C	; 44
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1366:	eb e2       	ldi	r30, 0x2B	; 43
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	dc f7       	brge	.-10     	; 0x1366 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1370:	ec e2       	ldi	r30, 0x2C	; 44
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
}
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <UART_sendString+0x6>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	9b 83       	std	Y+3, r25	; 0x03
    138a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    138c:	19 82       	std	Y+1, r1	; 0x01
    138e:	0e c0       	rjmp	.+28     	; 0x13ac <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	80 81       	ld	r24, Z
    13a2:	0e 94 98 09 	call	0x1330	; 0x1330 <UART_sendByte>
		i++;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	fc 01       	movw	r30, r24
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	80 81       	ld	r24, Z
    13be:	88 23       	and	r24, r24
    13c0:	39 f7       	brne	.-50     	; 0x1390 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <UART_receiveString+0xa>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	9b 83       	std	Y+3, r25	; 0x03
    13e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    13e2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	8c 01       	movw	r16, r24
    13f0:	02 0f       	add	r16, r18
    13f2:	13 1f       	adc	r17, r19
    13f4:	0e 94 af 09 	call	0x135e	; 0x135e <UART_recieveByte>
    13f8:	f8 01       	movw	r30, r16
    13fa:	80 83       	st	Z, r24
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	8c 01       	movw	r16, r24
    1410:	02 0f       	add	r16, r18
    1412:	13 1f       	adc	r17, r19
    1414:	0e 94 af 09 	call	0x135e	; 0x135e <UART_recieveByte>
    1418:	f8 01       	movw	r30, r16
    141a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	9b 81       	ldd	r25, Y+3	; 0x03
    1426:	fc 01       	movw	r30, r24
    1428:	e2 0f       	add	r30, r18
    142a:	f3 1f       	adc	r31, r19
    142c:	80 81       	ld	r24, Z
    142e:	83 32       	cpi	r24, 0x23	; 35
    1430:	31 f7       	brne	.-52     	; 0x13fe <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	fc 01       	movw	r30, r24
    143e:	e2 0f       	add	r30, r18
    1440:	f3 1f       	adc	r31, r19
    1442:	10 82       	st	Z, r1
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	08 95       	ret

00001454 <recieve>:
uint8 recieve (void)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	uint8 temp;
	UART_init(9600);
    145e:	60 e8       	ldi	r22, 0x80	; 128
    1460:	75 e2       	ldi	r23, 0x25	; 37
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 4c 09 	call	0x1298	; 0x1298 <UART_init>
	temp=UART_recieveByte();
    146a:	0e 94 af 09 	call	0x135e	; 0x135e <UART_recieveByte>
    146e:	89 83       	std	Y+1, r24	; 0x01

return temp ;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
}
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <transmit>:
void transmit (uint8 temp, uint8 past_temp)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <transmit+0x6>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	6a 83       	std	Y+2, r22	; 0x02
	UART_init(9600);
    1488:	60 e8       	ldi	r22, 0x80	; 128
    148a:	75 e2       	ldi	r23, 0x25	; 37
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 4c 09 	call	0x1298	; 0x1298 <UART_init>
	if(temp!=past_temp)
    1494:	99 81       	ldd	r25, Y+1	; 0x01
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	98 17       	cp	r25, r24
    149a:	19 f0       	breq	.+6      	; 0x14a2 <transmit+0x28>
	{
		UART_sendByte(temp);
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	0e 94 98 09 	call	0x1330	; 0x1330 <UART_sendByte>
	}
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <__fixunssfsi>:
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	7b 01       	movw	r14, r22
    14b6:	8c 01       	movw	r16, r24
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	5f e4       	ldi	r21, 0x4F	; 79
    14c0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__gesf2>
    14c4:	88 23       	and	r24, r24
    14c6:	8c f0       	brlt	.+34     	; 0x14ea <__fixunssfsi+0x3e>
    14c8:	c8 01       	movw	r24, r16
    14ca:	b7 01       	movw	r22, r14
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	5f e4       	ldi	r21, 0x4F	; 79
    14d4:	0e 94 ce 0b 	call	0x179c	; 0x179c <__subsf3>
    14d8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixsfsi>
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	20 50       	subi	r18, 0x00	; 0
    14e2:	30 40       	sbci	r19, 0x00	; 0
    14e4:	40 40       	sbci	r20, 0x00	; 0
    14e6:	50 48       	sbci	r21, 0x80	; 128
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <__fixunssfsi+0x4a>
    14ea:	c8 01       	movw	r24, r16
    14ec:	b7 01       	movw	r22, r14
    14ee:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixsfsi>
    14f2:	9b 01       	movw	r18, r22
    14f4:	ac 01       	movw	r20, r24
    14f6:	b9 01       	movw	r22, r18
    14f8:	ca 01       	movw	r24, r20
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	08 95       	ret

00001504 <_fpadd_parts>:
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e8       	ldi	r30, 0x88	; 136
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__prologue_saves__>
    1510:	dc 01       	movw	r26, r24
    1512:	2b 01       	movw	r4, r22
    1514:	fa 01       	movw	r30, r20
    1516:	9c 91       	ld	r25, X
    1518:	92 30       	cpi	r25, 0x02	; 2
    151a:	08 f4       	brcc	.+2      	; 0x151e <_fpadd_parts+0x1a>
    151c:	39 c1       	rjmp	.+626    	; 0x1790 <_fpadd_parts+0x28c>
    151e:	eb 01       	movw	r28, r22
    1520:	88 81       	ld	r24, Y
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	08 f4       	brcc	.+2      	; 0x1528 <_fpadd_parts+0x24>
    1526:	33 c1       	rjmp	.+614    	; 0x178e <_fpadd_parts+0x28a>
    1528:	94 30       	cpi	r25, 0x04	; 4
    152a:	69 f4       	brne	.+26     	; 0x1546 <_fpadd_parts+0x42>
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	09 f0       	breq	.+2      	; 0x1532 <_fpadd_parts+0x2e>
    1530:	2f c1       	rjmp	.+606    	; 0x1790 <_fpadd_parts+0x28c>
    1532:	11 96       	adiw	r26, 0x01	; 1
    1534:	9c 91       	ld	r25, X
    1536:	11 97       	sbiw	r26, 0x01	; 1
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	98 17       	cp	r25, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <_fpadd_parts+0x3c>
    153e:	28 c1       	rjmp	.+592    	; 0x1790 <_fpadd_parts+0x28c>
    1540:	ab e8       	ldi	r26, 0x8B	; 139
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	25 c1       	rjmp	.+586    	; 0x1790 <_fpadd_parts+0x28c>
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	09 f4       	brne	.+2      	; 0x154c <_fpadd_parts+0x48>
    154a:	21 c1       	rjmp	.+578    	; 0x178e <_fpadd_parts+0x28a>
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	a9 f4       	brne	.+42     	; 0x157a <_fpadd_parts+0x76>
    1550:	92 30       	cpi	r25, 0x02	; 2
    1552:	09 f0       	breq	.+2      	; 0x1556 <_fpadd_parts+0x52>
    1554:	1d c1       	rjmp	.+570    	; 0x1790 <_fpadd_parts+0x28c>
    1556:	9a 01       	movw	r18, r20
    1558:	ad 01       	movw	r20, r26
    155a:	88 e0       	ldi	r24, 0x08	; 8
    155c:	ea 01       	movw	r28, r20
    155e:	09 90       	ld	r0, Y+
    1560:	ae 01       	movw	r20, r28
    1562:	e9 01       	movw	r28, r18
    1564:	09 92       	st	Y+, r0
    1566:	9e 01       	movw	r18, r28
    1568:	81 50       	subi	r24, 0x01	; 1
    156a:	c1 f7       	brne	.-16     	; 0x155c <_fpadd_parts+0x58>
    156c:	e2 01       	movw	r28, r4
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	9c 91       	ld	r25, X
    1574:	89 23       	and	r24, r25
    1576:	81 83       	std	Z+1, r24	; 0x01
    1578:	08 c1       	rjmp	.+528    	; 0x178a <_fpadd_parts+0x286>
    157a:	92 30       	cpi	r25, 0x02	; 2
    157c:	09 f4       	brne	.+2      	; 0x1580 <_fpadd_parts+0x7c>
    157e:	07 c1       	rjmp	.+526    	; 0x178e <_fpadd_parts+0x28a>
    1580:	12 96       	adiw	r26, 0x02	; 2
    1582:	2d 90       	ld	r2, X+
    1584:	3c 90       	ld	r3, X
    1586:	13 97       	sbiw	r26, 0x03	; 3
    1588:	eb 01       	movw	r28, r22
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	14 96       	adiw	r26, 0x04	; 4
    1590:	ad 90       	ld	r10, X+
    1592:	bd 90       	ld	r11, X+
    1594:	cd 90       	ld	r12, X+
    1596:	dc 90       	ld	r13, X
    1598:	17 97       	sbiw	r26, 0x07	; 7
    159a:	ec 80       	ldd	r14, Y+4	; 0x04
    159c:	fd 80       	ldd	r15, Y+5	; 0x05
    159e:	0e 81       	ldd	r16, Y+6	; 0x06
    15a0:	1f 81       	ldd	r17, Y+7	; 0x07
    15a2:	91 01       	movw	r18, r2
    15a4:	28 1b       	sub	r18, r24
    15a6:	39 0b       	sbc	r19, r25
    15a8:	b9 01       	movw	r22, r18
    15aa:	37 ff       	sbrs	r19, 7
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <_fpadd_parts+0xb2>
    15ae:	66 27       	eor	r22, r22
    15b0:	77 27       	eor	r23, r23
    15b2:	62 1b       	sub	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	60 32       	cpi	r22, 0x20	; 32
    15b8:	71 05       	cpc	r23, r1
    15ba:	0c f0       	brlt	.+2      	; 0x15be <_fpadd_parts+0xba>
    15bc:	61 c0       	rjmp	.+194    	; 0x1680 <_fpadd_parts+0x17c>
    15be:	12 16       	cp	r1, r18
    15c0:	13 06       	cpc	r1, r19
    15c2:	6c f5       	brge	.+90     	; 0x161e <_fpadd_parts+0x11a>
    15c4:	37 01       	movw	r6, r14
    15c6:	48 01       	movw	r8, r16
    15c8:	06 2e       	mov	r0, r22
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <_fpadd_parts+0xd0>
    15cc:	96 94       	lsr	r9
    15ce:	87 94       	ror	r8
    15d0:	77 94       	ror	r7
    15d2:	67 94       	ror	r6
    15d4:	0a 94       	dec	r0
    15d6:	d2 f7       	brpl	.-12     	; 0x15cc <_fpadd_parts+0xc8>
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <_fpadd_parts+0xe6>
    15e2:	22 0f       	add	r18, r18
    15e4:	33 1f       	adc	r19, r19
    15e6:	44 1f       	adc	r20, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	6a 95       	dec	r22
    15ec:	d2 f7       	brpl	.-12     	; 0x15e2 <_fpadd_parts+0xde>
    15ee:	21 50       	subi	r18, 0x01	; 1
    15f0:	30 40       	sbci	r19, 0x00	; 0
    15f2:	40 40       	sbci	r20, 0x00	; 0
    15f4:	50 40       	sbci	r21, 0x00	; 0
    15f6:	2e 21       	and	r18, r14
    15f8:	3f 21       	and	r19, r15
    15fa:	40 23       	and	r20, r16
    15fc:	51 23       	and	r21, r17
    15fe:	21 15       	cp	r18, r1
    1600:	31 05       	cpc	r19, r1
    1602:	41 05       	cpc	r20, r1
    1604:	51 05       	cpc	r21, r1
    1606:	21 f0       	breq	.+8      	; 0x1610 <_fpadd_parts+0x10c>
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	79 01       	movw	r14, r18
    1612:	8a 01       	movw	r16, r20
    1614:	e6 28       	or	r14, r6
    1616:	f7 28       	or	r15, r7
    1618:	08 29       	or	r16, r8
    161a:	19 29       	or	r17, r9
    161c:	3c c0       	rjmp	.+120    	; 0x1696 <_fpadd_parts+0x192>
    161e:	23 2b       	or	r18, r19
    1620:	d1 f1       	breq	.+116    	; 0x1696 <_fpadd_parts+0x192>
    1622:	26 0e       	add	r2, r22
    1624:	37 1e       	adc	r3, r23
    1626:	35 01       	movw	r6, r10
    1628:	46 01       	movw	r8, r12
    162a:	06 2e       	mov	r0, r22
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <_fpadd_parts+0x132>
    162e:	96 94       	lsr	r9
    1630:	87 94       	ror	r8
    1632:	77 94       	ror	r7
    1634:	67 94       	ror	r6
    1636:	0a 94       	dec	r0
    1638:	d2 f7       	brpl	.-12     	; 0x162e <_fpadd_parts+0x12a>
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	04 c0       	rjmp	.+8      	; 0x164c <_fpadd_parts+0x148>
    1644:	22 0f       	add	r18, r18
    1646:	33 1f       	adc	r19, r19
    1648:	44 1f       	adc	r20, r20
    164a:	55 1f       	adc	r21, r21
    164c:	6a 95       	dec	r22
    164e:	d2 f7       	brpl	.-12     	; 0x1644 <_fpadd_parts+0x140>
    1650:	21 50       	subi	r18, 0x01	; 1
    1652:	30 40       	sbci	r19, 0x00	; 0
    1654:	40 40       	sbci	r20, 0x00	; 0
    1656:	50 40       	sbci	r21, 0x00	; 0
    1658:	2a 21       	and	r18, r10
    165a:	3b 21       	and	r19, r11
    165c:	4c 21       	and	r20, r12
    165e:	5d 21       	and	r21, r13
    1660:	21 15       	cp	r18, r1
    1662:	31 05       	cpc	r19, r1
    1664:	41 05       	cpc	r20, r1
    1666:	51 05       	cpc	r21, r1
    1668:	21 f0       	breq	.+8      	; 0x1672 <_fpadd_parts+0x16e>
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	59 01       	movw	r10, r18
    1674:	6a 01       	movw	r12, r20
    1676:	a6 28       	or	r10, r6
    1678:	b7 28       	or	r11, r7
    167a:	c8 28       	or	r12, r8
    167c:	d9 28       	or	r13, r9
    167e:	0b c0       	rjmp	.+22     	; 0x1696 <_fpadd_parts+0x192>
    1680:	82 15       	cp	r24, r2
    1682:	93 05       	cpc	r25, r3
    1684:	2c f0       	brlt	.+10     	; 0x1690 <_fpadd_parts+0x18c>
    1686:	1c 01       	movw	r2, r24
    1688:	aa 24       	eor	r10, r10
    168a:	bb 24       	eor	r11, r11
    168c:	65 01       	movw	r12, r10
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <_fpadd_parts+0x192>
    1690:	ee 24       	eor	r14, r14
    1692:	ff 24       	eor	r15, r15
    1694:	87 01       	movw	r16, r14
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	9c 91       	ld	r25, X
    169a:	d2 01       	movw	r26, r4
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	8c 91       	ld	r24, X
    16a0:	98 17       	cp	r25, r24
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <_fpadd_parts+0x1a2>
    16a4:	45 c0       	rjmp	.+138    	; 0x1730 <_fpadd_parts+0x22c>
    16a6:	99 23       	and	r25, r25
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <_fpadd_parts+0x1b4>
    16aa:	a8 01       	movw	r20, r16
    16ac:	97 01       	movw	r18, r14
    16ae:	2a 19       	sub	r18, r10
    16b0:	3b 09       	sbc	r19, r11
    16b2:	4c 09       	sbc	r20, r12
    16b4:	5d 09       	sbc	r21, r13
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <_fpadd_parts+0x1c0>
    16b8:	a6 01       	movw	r20, r12
    16ba:	95 01       	movw	r18, r10
    16bc:	2e 19       	sub	r18, r14
    16be:	3f 09       	sbc	r19, r15
    16c0:	40 0b       	sbc	r20, r16
    16c2:	51 0b       	sbc	r21, r17
    16c4:	57 fd       	sbrc	r21, 7
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <_fpadd_parts+0x1d4>
    16c8:	11 82       	std	Z+1, r1	; 0x01
    16ca:	33 82       	std	Z+3, r3	; 0x03
    16cc:	22 82       	std	Z+2, r2	; 0x02
    16ce:	24 83       	std	Z+4, r18	; 0x04
    16d0:	35 83       	std	Z+5, r19	; 0x05
    16d2:	46 83       	std	Z+6, r20	; 0x06
    16d4:	57 83       	std	Z+7, r21	; 0x07
    16d6:	1d c0       	rjmp	.+58     	; 0x1712 <_fpadd_parts+0x20e>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	81 83       	std	Z+1, r24	; 0x01
    16dc:	33 82       	std	Z+3, r3	; 0x03
    16de:	22 82       	std	Z+2, r2	; 0x02
    16e0:	88 27       	eor	r24, r24
    16e2:	99 27       	eor	r25, r25
    16e4:	dc 01       	movw	r26, r24
    16e6:	82 1b       	sub	r24, r18
    16e8:	93 0b       	sbc	r25, r19
    16ea:	a4 0b       	sbc	r26, r20
    16ec:	b5 0b       	sbc	r27, r21
    16ee:	84 83       	std	Z+4, r24	; 0x04
    16f0:	95 83       	std	Z+5, r25	; 0x05
    16f2:	a6 83       	std	Z+6, r26	; 0x06
    16f4:	b7 83       	std	Z+7, r27	; 0x07
    16f6:	0d c0       	rjmp	.+26     	; 0x1712 <_fpadd_parts+0x20e>
    16f8:	22 0f       	add	r18, r18
    16fa:	33 1f       	adc	r19, r19
    16fc:	44 1f       	adc	r20, r20
    16fe:	55 1f       	adc	r21, r21
    1700:	24 83       	std	Z+4, r18	; 0x04
    1702:	35 83       	std	Z+5, r19	; 0x05
    1704:	46 83       	std	Z+6, r20	; 0x06
    1706:	57 83       	std	Z+7, r21	; 0x07
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	93 83       	std	Z+3, r25	; 0x03
    1710:	82 83       	std	Z+2, r24	; 0x02
    1712:	24 81       	ldd	r18, Z+4	; 0x04
    1714:	35 81       	ldd	r19, Z+5	; 0x05
    1716:	46 81       	ldd	r20, Z+6	; 0x06
    1718:	57 81       	ldd	r21, Z+7	; 0x07
    171a:	da 01       	movw	r26, r20
    171c:	c9 01       	movw	r24, r18
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	a1 09       	sbc	r26, r1
    1722:	b1 09       	sbc	r27, r1
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	af 4f       	sbci	r26, 0xFF	; 255
    172a:	bf 43       	sbci	r27, 0x3F	; 63
    172c:	28 f3       	brcs	.-54     	; 0x16f8 <_fpadd_parts+0x1f4>
    172e:	0b c0       	rjmp	.+22     	; 0x1746 <_fpadd_parts+0x242>
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	33 82       	std	Z+3, r3	; 0x03
    1734:	22 82       	std	Z+2, r2	; 0x02
    1736:	ea 0c       	add	r14, r10
    1738:	fb 1c       	adc	r15, r11
    173a:	0c 1d       	adc	r16, r12
    173c:	1d 1d       	adc	r17, r13
    173e:	e4 82       	std	Z+4, r14	; 0x04
    1740:	f5 82       	std	Z+5, r15	; 0x05
    1742:	06 83       	std	Z+6, r16	; 0x06
    1744:	17 83       	std	Z+7, r17	; 0x07
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	80 83       	st	Z, r24
    174a:	24 81       	ldd	r18, Z+4	; 0x04
    174c:	35 81       	ldd	r19, Z+5	; 0x05
    174e:	46 81       	ldd	r20, Z+6	; 0x06
    1750:	57 81       	ldd	r21, Z+7	; 0x07
    1752:	57 ff       	sbrs	r21, 7
    1754:	1a c0       	rjmp	.+52     	; 0x178a <_fpadd_parts+0x286>
    1756:	c9 01       	movw	r24, r18
    1758:	aa 27       	eor	r26, r26
    175a:	97 fd       	sbrc	r25, 7
    175c:	a0 95       	com	r26
    175e:	ba 2f       	mov	r27, r26
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	a0 70       	andi	r26, 0x00	; 0
    1766:	b0 70       	andi	r27, 0x00	; 0
    1768:	56 95       	lsr	r21
    176a:	47 95       	ror	r20
    176c:	37 95       	ror	r19
    176e:	27 95       	ror	r18
    1770:	82 2b       	or	r24, r18
    1772:	93 2b       	or	r25, r19
    1774:	a4 2b       	or	r26, r20
    1776:	b5 2b       	or	r27, r21
    1778:	84 83       	std	Z+4, r24	; 0x04
    177a:	95 83       	std	Z+5, r25	; 0x05
    177c:	a6 83       	std	Z+6, r26	; 0x06
    177e:	b7 83       	std	Z+7, r27	; 0x07
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	93 83       	std	Z+3, r25	; 0x03
    1788:	82 83       	std	Z+2, r24	; 0x02
    178a:	df 01       	movw	r26, r30
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <_fpadd_parts+0x28c>
    178e:	d2 01       	movw	r26, r4
    1790:	cd 01       	movw	r24, r26
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	e2 e1       	ldi	r30, 0x12	; 18
    1798:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__epilogue_restores__>

0000179c <__subsf3>:
    179c:	a0 e2       	ldi	r26, 0x20	; 32
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 ed       	ldi	r30, 0xD4	; 212
    17a2:	fb e0       	ldi	r31, 0x0B	; 11
    17a4:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    17a8:	69 83       	std	Y+1, r22	; 0x01
    17aa:	7a 83       	std	Y+2, r23	; 0x02
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	2d 83       	std	Y+5, r18	; 0x05
    17b2:	3e 83       	std	Y+6, r19	; 0x06
    17b4:	4f 83       	std	Y+7, r20	; 0x07
    17b6:	58 87       	std	Y+8, r21	; 0x08
    17b8:	e9 e0       	ldi	r30, 0x09	; 9
    17ba:	ee 2e       	mov	r14, r30
    17bc:	f1 2c       	mov	r15, r1
    17be:	ec 0e       	add	r14, r28
    17c0:	fd 1e       	adc	r15, r29
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	b7 01       	movw	r22, r14
    17c8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    17cc:	8e 01       	movw	r16, r28
    17ce:	0f 5e       	subi	r16, 0xEF	; 239
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	ce 01       	movw	r24, r28
    17d4:	05 96       	adiw	r24, 0x05	; 5
    17d6:	b8 01       	movw	r22, r16
    17d8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    17dc:	8a 89       	ldd	r24, Y+18	; 0x12
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	89 27       	eor	r24, r25
    17e2:	8a 8b       	std	Y+18, r24	; 0x12
    17e4:	c7 01       	movw	r24, r14
    17e6:	b8 01       	movw	r22, r16
    17e8:	ae 01       	movw	r20, r28
    17ea:	47 5e       	subi	r20, 0xE7	; 231
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	0e 94 82 0a 	call	0x1504	; 0x1504 <_fpadd_parts>
    17f2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__pack_f>
    17f6:	a0 96       	adiw	r28, 0x20	; 32
    17f8:	e6 e0       	ldi	r30, 0x06	; 6
    17fa:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

000017fe <__addsf3>:
    17fe:	a0 e2       	ldi	r26, 0x20	; 32
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e0       	ldi	r30, 0x05	; 5
    1804:	fc e0       	ldi	r31, 0x0C	; 12
    1806:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    180a:	69 83       	std	Y+1, r22	; 0x01
    180c:	7a 83       	std	Y+2, r23	; 0x02
    180e:	8b 83       	std	Y+3, r24	; 0x03
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	2d 83       	std	Y+5, r18	; 0x05
    1814:	3e 83       	std	Y+6, r19	; 0x06
    1816:	4f 83       	std	Y+7, r20	; 0x07
    1818:	58 87       	std	Y+8, r21	; 0x08
    181a:	f9 e0       	ldi	r31, 0x09	; 9
    181c:	ef 2e       	mov	r14, r31
    181e:	f1 2c       	mov	r15, r1
    1820:	ec 0e       	add	r14, r28
    1822:	fd 1e       	adc	r15, r29
    1824:	ce 01       	movw	r24, r28
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	b7 01       	movw	r22, r14
    182a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    182e:	8e 01       	movw	r16, r28
    1830:	0f 5e       	subi	r16, 0xEF	; 239
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	ce 01       	movw	r24, r28
    1836:	05 96       	adiw	r24, 0x05	; 5
    1838:	b8 01       	movw	r22, r16
    183a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    183e:	c7 01       	movw	r24, r14
    1840:	b8 01       	movw	r22, r16
    1842:	ae 01       	movw	r20, r28
    1844:	47 5e       	subi	r20, 0xE7	; 231
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	0e 94 82 0a 	call	0x1504	; 0x1504 <_fpadd_parts>
    184c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__pack_f>
    1850:	a0 96       	adiw	r28, 0x20	; 32
    1852:	e6 e0       	ldi	r30, 0x06	; 6
    1854:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001858 <__mulsf3>:
    1858:	a0 e2       	ldi	r26, 0x20	; 32
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	fc e0       	ldi	r31, 0x0C	; 12
    1860:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__prologue_saves__>
    1864:	69 83       	std	Y+1, r22	; 0x01
    1866:	7a 83       	std	Y+2, r23	; 0x02
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	9c 83       	std	Y+4, r25	; 0x04
    186c:	2d 83       	std	Y+5, r18	; 0x05
    186e:	3e 83       	std	Y+6, r19	; 0x06
    1870:	4f 83       	std	Y+7, r20	; 0x07
    1872:	58 87       	std	Y+8, r21	; 0x08
    1874:	ce 01       	movw	r24, r28
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	be 01       	movw	r22, r28
    187a:	67 5f       	subi	r22, 0xF7	; 247
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1882:	ce 01       	movw	r24, r28
    1884:	05 96       	adiw	r24, 0x05	; 5
    1886:	be 01       	movw	r22, r28
    1888:	6f 5e       	subi	r22, 0xEF	; 239
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1890:	99 85       	ldd	r25, Y+9	; 0x09
    1892:	92 30       	cpi	r25, 0x02	; 2
    1894:	88 f0       	brcs	.+34     	; 0x18b8 <__mulsf3+0x60>
    1896:	89 89       	ldd	r24, Y+17	; 0x11
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	c8 f0       	brcs	.+50     	; 0x18ce <__mulsf3+0x76>
    189c:	94 30       	cpi	r25, 0x04	; 4
    189e:	19 f4       	brne	.+6      	; 0x18a6 <__mulsf3+0x4e>
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	51 f4       	brne	.+20     	; 0x18b8 <__mulsf3+0x60>
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <__mulsf3+0x56>
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <__mulsf3+0x5c>
    18aa:	92 30       	cpi	r25, 0x02	; 2
    18ac:	81 f4       	brne	.+32     	; 0x18ce <__mulsf3+0x76>
    18ae:	8b e8       	ldi	r24, 0x8B	; 139
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	c6 c0       	rjmp	.+396    	; 0x1a40 <__mulsf3+0x1e8>
    18b4:	92 30       	cpi	r25, 0x02	; 2
    18b6:	49 f4       	brne	.+18     	; 0x18ca <__mulsf3+0x72>
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	8a 89       	ldd	r24, Y+18	; 0x12
    18be:	98 13       	cpse	r25, r24
    18c0:	21 e0       	ldi	r18, 0x01	; 1
    18c2:	2a 87       	std	Y+10, r18	; 0x0a
    18c4:	ce 01       	movw	r24, r28
    18c6:	09 96       	adiw	r24, 0x09	; 9
    18c8:	bb c0       	rjmp	.+374    	; 0x1a40 <__mulsf3+0x1e8>
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	49 f4       	brne	.+18     	; 0x18e0 <__mulsf3+0x88>
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	8a 89       	ldd	r24, Y+18	; 0x12
    18d4:	98 13       	cpse	r25, r24
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	2a 8b       	std	Y+18, r18	; 0x12
    18da:	ce 01       	movw	r24, r28
    18dc:	41 96       	adiw	r24, 0x11	; 17
    18de:	b0 c0       	rjmp	.+352    	; 0x1a40 <__mulsf3+0x1e8>
    18e0:	2d 84       	ldd	r2, Y+13	; 0x0d
    18e2:	3e 84       	ldd	r3, Y+14	; 0x0e
    18e4:	4f 84       	ldd	r4, Y+15	; 0x0f
    18e6:	58 88       	ldd	r5, Y+16	; 0x10
    18e8:	6d 88       	ldd	r6, Y+21	; 0x15
    18ea:	7e 88       	ldd	r7, Y+22	; 0x16
    18ec:	8f 88       	ldd	r8, Y+23	; 0x17
    18ee:	98 8c       	ldd	r9, Y+24	; 0x18
    18f0:	ee 24       	eor	r14, r14
    18f2:	ff 24       	eor	r15, r15
    18f4:	87 01       	movw	r16, r14
    18f6:	aa 24       	eor	r10, r10
    18f8:	bb 24       	eor	r11, r11
    18fa:	65 01       	movw	r12, r10
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	e0 e0       	ldi	r30, 0x00	; 0
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	c1 01       	movw	r24, r2
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	89 2b       	or	r24, r25
    1910:	e9 f0       	breq	.+58     	; 0x194c <__mulsf3+0xf4>
    1912:	e6 0c       	add	r14, r6
    1914:	f7 1c       	adc	r15, r7
    1916:	08 1d       	adc	r16, r8
    1918:	19 1d       	adc	r17, r9
    191a:	9a 01       	movw	r18, r20
    191c:	ab 01       	movw	r20, r22
    191e:	2a 0d       	add	r18, r10
    1920:	3b 1d       	adc	r19, r11
    1922:	4c 1d       	adc	r20, r12
    1924:	5d 1d       	adc	r21, r13
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e6 14       	cp	r14, r6
    1930:	f7 04       	cpc	r15, r7
    1932:	08 05       	cpc	r16, r8
    1934:	19 05       	cpc	r17, r9
    1936:	20 f4       	brcc	.+8      	; 0x1940 <__mulsf3+0xe8>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ba 01       	movw	r22, r20
    1942:	a9 01       	movw	r20, r18
    1944:	48 0f       	add	r20, r24
    1946:	59 1f       	adc	r21, r25
    1948:	6a 1f       	adc	r22, r26
    194a:	7b 1f       	adc	r23, r27
    194c:	aa 0c       	add	r10, r10
    194e:	bb 1c       	adc	r11, r11
    1950:	cc 1c       	adc	r12, r12
    1952:	dd 1c       	adc	r13, r13
    1954:	97 fe       	sbrs	r9, 7
    1956:	08 c0       	rjmp	.+16     	; 0x1968 <__mulsf3+0x110>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	a8 2a       	or	r10, r24
    1962:	b9 2a       	or	r11, r25
    1964:	ca 2a       	or	r12, r26
    1966:	db 2a       	or	r13, r27
    1968:	31 96       	adiw	r30, 0x01	; 1
    196a:	e0 32       	cpi	r30, 0x20	; 32
    196c:	f1 05       	cpc	r31, r1
    196e:	49 f0       	breq	.+18     	; 0x1982 <__mulsf3+0x12a>
    1970:	66 0c       	add	r6, r6
    1972:	77 1c       	adc	r7, r7
    1974:	88 1c       	adc	r8, r8
    1976:	99 1c       	adc	r9, r9
    1978:	56 94       	lsr	r5
    197a:	47 94       	ror	r4
    197c:	37 94       	ror	r3
    197e:	27 94       	ror	r2
    1980:	c3 cf       	rjmp	.-122    	; 0x1908 <__mulsf3+0xb0>
    1982:	fa 85       	ldd	r31, Y+10	; 0x0a
    1984:	ea 89       	ldd	r30, Y+18	; 0x12
    1986:	2b 89       	ldd	r18, Y+19	; 0x13
    1988:	3c 89       	ldd	r19, Y+20	; 0x14
    198a:	8b 85       	ldd	r24, Y+11	; 0x0b
    198c:	9c 85       	ldd	r25, Y+12	; 0x0c
    198e:	28 0f       	add	r18, r24
    1990:	39 1f       	adc	r19, r25
    1992:	2e 5f       	subi	r18, 0xFE	; 254
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	17 c0       	rjmp	.+46     	; 0x19c6 <__mulsf3+0x16e>
    1998:	ca 01       	movw	r24, r20
    199a:	81 70       	andi	r24, 0x01	; 1
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	89 2b       	or	r24, r25
    19a0:	61 f0       	breq	.+24     	; 0x19ba <__mulsf3+0x162>
    19a2:	16 95       	lsr	r17
    19a4:	07 95       	ror	r16
    19a6:	f7 94       	ror	r15
    19a8:	e7 94       	ror	r14
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e0       	ldi	r26, 0x00	; 0
    19b0:	b0 e8       	ldi	r27, 0x80	; 128
    19b2:	e8 2a       	or	r14, r24
    19b4:	f9 2a       	or	r15, r25
    19b6:	0a 2b       	or	r16, r26
    19b8:	1b 2b       	or	r17, r27
    19ba:	76 95       	lsr	r23
    19bc:	67 95       	ror	r22
    19be:	57 95       	ror	r21
    19c0:	47 95       	ror	r20
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	77 fd       	sbrc	r23, 7
    19c8:	e7 cf       	rjmp	.-50     	; 0x1998 <__mulsf3+0x140>
    19ca:	0c c0       	rjmp	.+24     	; 0x19e4 <__mulsf3+0x18c>
    19cc:	44 0f       	add	r20, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	66 1f       	adc	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	17 fd       	sbrc	r17, 7
    19d6:	41 60       	ori	r20, 0x01	; 1
    19d8:	ee 0c       	add	r14, r14
    19da:	ff 1c       	adc	r15, r15
    19dc:	00 1f       	adc	r16, r16
    19de:	11 1f       	adc	r17, r17
    19e0:	21 50       	subi	r18, 0x01	; 1
    19e2:	30 40       	sbci	r19, 0x00	; 0
    19e4:	40 30       	cpi	r20, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	59 07       	cpc	r21, r25
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	69 07       	cpc	r22, r25
    19ee:	90 e4       	ldi	r25, 0x40	; 64
    19f0:	79 07       	cpc	r23, r25
    19f2:	60 f3       	brcs	.-40     	; 0x19cc <__mulsf3+0x174>
    19f4:	2b 8f       	std	Y+27, r18	; 0x1b
    19f6:	3c 8f       	std	Y+28, r19	; 0x1c
    19f8:	db 01       	movw	r26, r22
    19fa:	ca 01       	movw	r24, r20
    19fc:	8f 77       	andi	r24, 0x7F	; 127
    19fe:	90 70       	andi	r25, 0x00	; 0
    1a00:	a0 70       	andi	r26, 0x00	; 0
    1a02:	b0 70       	andi	r27, 0x00	; 0
    1a04:	80 34       	cpi	r24, 0x40	; 64
    1a06:	91 05       	cpc	r25, r1
    1a08:	a1 05       	cpc	r26, r1
    1a0a:	b1 05       	cpc	r27, r1
    1a0c:	61 f4       	brne	.+24     	; 0x1a26 <__mulsf3+0x1ce>
    1a0e:	47 fd       	sbrc	r20, 7
    1a10:	0a c0       	rjmp	.+20     	; 0x1a26 <__mulsf3+0x1ce>
    1a12:	e1 14       	cp	r14, r1
    1a14:	f1 04       	cpc	r15, r1
    1a16:	01 05       	cpc	r16, r1
    1a18:	11 05       	cpc	r17, r1
    1a1a:	29 f0       	breq	.+10     	; 0x1a26 <__mulsf3+0x1ce>
    1a1c:	40 5c       	subi	r20, 0xC0	; 192
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a20:	6f 4f       	sbci	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	40 78       	andi	r20, 0x80	; 128
    1a26:	1a 8e       	std	Y+26, r1	; 0x1a
    1a28:	fe 17       	cp	r31, r30
    1a2a:	11 f0       	breq	.+4      	; 0x1a30 <__mulsf3+0x1d8>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	8a 8f       	std	Y+26, r24	; 0x1a
    1a30:	4d 8f       	std	Y+29, r20	; 0x1d
    1a32:	5e 8f       	std	Y+30, r21	; 0x1e
    1a34:	6f 8f       	std	Y+31, r22	; 0x1f
    1a36:	78 a3       	std	Y+32, r23	; 0x20
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	89 8f       	std	Y+25, r24	; 0x19
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	49 96       	adiw	r24, 0x19	; 25
    1a40:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__pack_f>
    1a44:	a0 96       	adiw	r28, 0x20	; 32
    1a46:	e2 e1       	ldi	r30, 0x12	; 18
    1a48:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__epilogue_restores__>

00001a4c <__gtsf2>:
    1a4c:	a8 e1       	ldi	r26, 0x18	; 24
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	ec e2       	ldi	r30, 0x2C	; 44
    1a52:	fd e0       	ldi	r31, 0x0D	; 13
    1a54:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    1a58:	69 83       	std	Y+1, r22	; 0x01
    1a5a:	7a 83       	std	Y+2, r23	; 0x02
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	2d 83       	std	Y+5, r18	; 0x05
    1a62:	3e 83       	std	Y+6, r19	; 0x06
    1a64:	4f 83       	std	Y+7, r20	; 0x07
    1a66:	58 87       	std	Y+8, r21	; 0x08
    1a68:	89 e0       	ldi	r24, 0x09	; 9
    1a6a:	e8 2e       	mov	r14, r24
    1a6c:	f1 2c       	mov	r15, r1
    1a6e:	ec 0e       	add	r14, r28
    1a70:	fd 1e       	adc	r15, r29
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	b7 01       	movw	r22, r14
    1a78:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1a7c:	8e 01       	movw	r16, r28
    1a7e:	0f 5e       	subi	r16, 0xEF	; 239
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	ce 01       	movw	r24, r28
    1a84:	05 96       	adiw	r24, 0x05	; 5
    1a86:	b8 01       	movw	r22, r16
    1a88:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1a8c:	89 85       	ldd	r24, Y+9	; 0x09
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	40 f0       	brcs	.+16     	; 0x1aa2 <__gtsf2+0x56>
    1a92:	89 89       	ldd	r24, Y+17	; 0x11
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	28 f0       	brcs	.+10     	; 0x1aa2 <__gtsf2+0x56>
    1a98:	c7 01       	movw	r24, r14
    1a9a:	b8 01       	movw	r22, r16
    1a9c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fpcmp_parts_f>
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <__gtsf2+0x58>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	68 96       	adiw	r28, 0x18	; 24
    1aa6:	e6 e0       	ldi	r30, 0x06	; 6
    1aa8:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001aac <__gesf2>:
    1aac:	a8 e1       	ldi	r26, 0x18	; 24
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ec e5       	ldi	r30, 0x5C	; 92
    1ab2:	fd e0       	ldi	r31, 0x0D	; 13
    1ab4:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    1ab8:	69 83       	std	Y+1, r22	; 0x01
    1aba:	7a 83       	std	Y+2, r23	; 0x02
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	2d 83       	std	Y+5, r18	; 0x05
    1ac2:	3e 83       	std	Y+6, r19	; 0x06
    1ac4:	4f 83       	std	Y+7, r20	; 0x07
    1ac6:	58 87       	std	Y+8, r21	; 0x08
    1ac8:	89 e0       	ldi	r24, 0x09	; 9
    1aca:	e8 2e       	mov	r14, r24
    1acc:	f1 2c       	mov	r15, r1
    1ace:	ec 0e       	add	r14, r28
    1ad0:	fd 1e       	adc	r15, r29
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	b7 01       	movw	r22, r14
    1ad8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1adc:	8e 01       	movw	r16, r28
    1ade:	0f 5e       	subi	r16, 0xEF	; 239
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	05 96       	adiw	r24, 0x05	; 5
    1ae6:	b8 01       	movw	r22, r16
    1ae8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	82 30       	cpi	r24, 0x02	; 2
    1af0:	40 f0       	brcs	.+16     	; 0x1b02 <__gesf2+0x56>
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	28 f0       	brcs	.+10     	; 0x1b02 <__gesf2+0x56>
    1af8:	c7 01       	movw	r24, r14
    1afa:	b8 01       	movw	r22, r16
    1afc:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fpcmp_parts_f>
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <__gesf2+0x58>
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	68 96       	adiw	r28, 0x18	; 24
    1b06:	e6 e0       	ldi	r30, 0x06	; 6
    1b08:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001b0c <__ltsf2>:
    1b0c:	a8 e1       	ldi	r26, 0x18	; 24
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ec e8       	ldi	r30, 0x8C	; 140
    1b12:	fd e0       	ldi	r31, 0x0D	; 13
    1b14:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    1b18:	69 83       	std	Y+1, r22	; 0x01
    1b1a:	7a 83       	std	Y+2, r23	; 0x02
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	2d 83       	std	Y+5, r18	; 0x05
    1b22:	3e 83       	std	Y+6, r19	; 0x06
    1b24:	4f 83       	std	Y+7, r20	; 0x07
    1b26:	58 87       	std	Y+8, r21	; 0x08
    1b28:	89 e0       	ldi	r24, 0x09	; 9
    1b2a:	e8 2e       	mov	r14, r24
    1b2c:	f1 2c       	mov	r15, r1
    1b2e:	ec 0e       	add	r14, r28
    1b30:	fd 1e       	adc	r15, r29
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	b7 01       	movw	r22, r14
    1b38:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1b3c:	8e 01       	movw	r16, r28
    1b3e:	0f 5e       	subi	r16, 0xEF	; 239
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	ce 01       	movw	r24, r28
    1b44:	05 96       	adiw	r24, 0x05	; 5
    1b46:	b8 01       	movw	r22, r16
    1b48:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	40 f0       	brcs	.+16     	; 0x1b62 <__ltsf2+0x56>
    1b52:	89 89       	ldd	r24, Y+17	; 0x11
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	28 f0       	brcs	.+10     	; 0x1b62 <__ltsf2+0x56>
    1b58:	c7 01       	movw	r24, r14
    1b5a:	b8 01       	movw	r22, r16
    1b5c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fpcmp_parts_f>
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <__ltsf2+0x58>
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	68 96       	adiw	r28, 0x18	; 24
    1b66:	e6 e0       	ldi	r30, 0x06	; 6
    1b68:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001b6c <__fixsfsi>:
    1b6c:	ac e0       	ldi	r26, 0x0C	; 12
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ec eb       	ldi	r30, 0xBC	; 188
    1b72:	fd e0       	ldi	r31, 0x0D	; 13
    1b74:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__prologue_saves__+0x20>
    1b78:	69 83       	std	Y+1, r22	; 0x01
    1b7a:	7a 83       	std	Y+2, r23	; 0x02
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	9c 83       	std	Y+4, r25	; 0x04
    1b80:	ce 01       	movw	r24, r28
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	be 01       	movw	r22, r28
    1b86:	6b 5f       	subi	r22, 0xFB	; 251
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__unpack_f>
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	61 f1       	breq	.+88     	; 0x1bec <__fixsfsi+0x80>
    1b94:	82 30       	cpi	r24, 0x02	; 2
    1b96:	50 f1       	brcs	.+84     	; 0x1bec <__fixsfsi+0x80>
    1b98:	84 30       	cpi	r24, 0x04	; 4
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <__fixsfsi+0x38>
    1b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9e:	88 23       	and	r24, r24
    1ba0:	51 f1       	breq	.+84     	; 0x1bf6 <__fixsfsi+0x8a>
    1ba2:	2e c0       	rjmp	.+92     	; 0x1c00 <__fixsfsi+0x94>
    1ba4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba6:	38 85       	ldd	r19, Y+8	; 0x08
    1ba8:	37 fd       	sbrc	r19, 7
    1baa:	20 c0       	rjmp	.+64     	; 0x1bec <__fixsfsi+0x80>
    1bac:	6e 81       	ldd	r22, Y+6	; 0x06
    1bae:	2f 31       	cpi	r18, 0x1F	; 31
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	1c f0       	brlt	.+6      	; 0x1bba <__fixsfsi+0x4e>
    1bb4:	66 23       	and	r22, r22
    1bb6:	f9 f0       	breq	.+62     	; 0x1bf6 <__fixsfsi+0x8a>
    1bb8:	23 c0       	rjmp	.+70     	; 0x1c00 <__fixsfsi+0x94>
    1bba:	8e e1       	ldi	r24, 0x1E	; 30
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	82 1b       	sub	r24, r18
    1bc0:	93 0b       	sbc	r25, r19
    1bc2:	29 85       	ldd	r18, Y+9	; 0x09
    1bc4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bc6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bc8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <__fixsfsi+0x68>
    1bcc:	56 95       	lsr	r21
    1bce:	47 95       	ror	r20
    1bd0:	37 95       	ror	r19
    1bd2:	27 95       	ror	r18
    1bd4:	8a 95       	dec	r24
    1bd6:	d2 f7       	brpl	.-12     	; 0x1bcc <__fixsfsi+0x60>
    1bd8:	66 23       	and	r22, r22
    1bda:	b1 f0       	breq	.+44     	; 0x1c08 <__fixsfsi+0x9c>
    1bdc:	50 95       	com	r21
    1bde:	40 95       	com	r20
    1be0:	30 95       	com	r19
    1be2:	21 95       	neg	r18
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	4f 4f       	sbci	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bea:	0e c0       	rjmp	.+28     	; 0x1c08 <__fixsfsi+0x9c>
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	09 c0       	rjmp	.+18     	; 0x1c08 <__fixsfsi+0x9c>
    1bf6:	2f ef       	ldi	r18, 0xFF	; 255
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f ef       	ldi	r20, 0xFF	; 255
    1bfc:	5f e7       	ldi	r21, 0x7F	; 127
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <__fixsfsi+0x9c>
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	50 e8       	ldi	r21, 0x80	; 128
    1c08:	b9 01       	movw	r22, r18
    1c0a:	ca 01       	movw	r24, r20
    1c0c:	2c 96       	adiw	r28, 0x0c	; 12
    1c0e:	e2 e0       	ldi	r30, 0x02	; 2
    1c10:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__epilogue_restores__+0x20>

00001c14 <__pack_f>:
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e4 80       	ldd	r14, Z+4	; 0x04
    1c22:	f5 80       	ldd	r15, Z+5	; 0x05
    1c24:	06 81       	ldd	r16, Z+6	; 0x06
    1c26:	17 81       	ldd	r17, Z+7	; 0x07
    1c28:	d1 80       	ldd	r13, Z+1	; 0x01
    1c2a:	80 81       	ld	r24, Z
    1c2c:	82 30       	cpi	r24, 0x02	; 2
    1c2e:	48 f4       	brcc	.+18     	; 0x1c42 <__pack_f+0x2e>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e1       	ldi	r26, 0x10	; 16
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e8 2a       	or	r14, r24
    1c3a:	f9 2a       	or	r15, r25
    1c3c:	0a 2b       	or	r16, r26
    1c3e:	1b 2b       	or	r17, r27
    1c40:	a5 c0       	rjmp	.+330    	; 0x1d8c <__pack_f+0x178>
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <__pack_f+0x34>
    1c46:	9f c0       	rjmp	.+318    	; 0x1d86 <__pack_f+0x172>
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	21 f4       	brne	.+8      	; 0x1c54 <__pack_f+0x40>
    1c4c:	ee 24       	eor	r14, r14
    1c4e:	ff 24       	eor	r15, r15
    1c50:	87 01       	movw	r16, r14
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <__pack_f+0x4a>
    1c54:	e1 14       	cp	r14, r1
    1c56:	f1 04       	cpc	r15, r1
    1c58:	01 05       	cpc	r16, r1
    1c5a:	11 05       	cpc	r17, r1
    1c5c:	19 f4       	brne	.+6      	; 0x1c64 <__pack_f+0x50>
    1c5e:	e0 e0       	ldi	r30, 0x00	; 0
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	96 c0       	rjmp	.+300    	; 0x1d90 <__pack_f+0x17c>
    1c64:	62 81       	ldd	r22, Z+2	; 0x02
    1c66:	73 81       	ldd	r23, Z+3	; 0x03
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	62 38       	cpi	r22, 0x82	; 130
    1c6c:	79 07       	cpc	r23, r25
    1c6e:	0c f0       	brlt	.+2      	; 0x1c72 <__pack_f+0x5e>
    1c70:	5b c0       	rjmp	.+182    	; 0x1d28 <__pack_f+0x114>
    1c72:	22 e8       	ldi	r18, 0x82	; 130
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	26 1b       	sub	r18, r22
    1c78:	37 0b       	sbc	r19, r23
    1c7a:	2a 31       	cpi	r18, 0x1A	; 26
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	2c f0       	brlt	.+10     	; 0x1c8a <__pack_f+0x76>
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	2a c0       	rjmp	.+84     	; 0x1cde <__pack_f+0xca>
    1c8a:	b8 01       	movw	r22, r16
    1c8c:	a7 01       	movw	r20, r14
    1c8e:	02 2e       	mov	r0, r18
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <__pack_f+0x86>
    1c92:	76 95       	lsr	r23
    1c94:	67 95       	ror	r22
    1c96:	57 95       	ror	r21
    1c98:	47 95       	ror	r20
    1c9a:	0a 94       	dec	r0
    1c9c:	d2 f7       	brpl	.-12     	; 0x1c92 <__pack_f+0x7e>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e0       	ldi	r26, 0x00	; 0
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <__pack_f+0x9c>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	aa 1f       	adc	r26, r26
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	2a 95       	dec	r18
    1cb2:	d2 f7       	brpl	.-12     	; 0x1ca8 <__pack_f+0x94>
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	a1 09       	sbc	r26, r1
    1cb8:	b1 09       	sbc	r27, r1
    1cba:	8e 21       	and	r24, r14
    1cbc:	9f 21       	and	r25, r15
    1cbe:	a0 23       	and	r26, r16
    1cc0:	b1 23       	and	r27, r17
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	a1 05       	cpc	r26, r1
    1cc6:	b1 05       	cpc	r27, r1
    1cc8:	21 f0       	breq	.+8      	; 0x1cd2 <__pack_f+0xbe>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	9a 01       	movw	r18, r20
    1cd4:	ab 01       	movw	r20, r22
    1cd6:	28 2b       	or	r18, r24
    1cd8:	39 2b       	or	r19, r25
    1cda:	4a 2b       	or	r20, r26
    1cdc:	5b 2b       	or	r21, r27
    1cde:	da 01       	movw	r26, r20
    1ce0:	c9 01       	movw	r24, r18
    1ce2:	8f 77       	andi	r24, 0x7F	; 127
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	a0 70       	andi	r26, 0x00	; 0
    1ce8:	b0 70       	andi	r27, 0x00	; 0
    1cea:	80 34       	cpi	r24, 0x40	; 64
    1cec:	91 05       	cpc	r25, r1
    1cee:	a1 05       	cpc	r26, r1
    1cf0:	b1 05       	cpc	r27, r1
    1cf2:	39 f4       	brne	.+14     	; 0x1d02 <__pack_f+0xee>
    1cf4:	27 ff       	sbrs	r18, 7
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <__pack_f+0xf6>
    1cf8:	20 5c       	subi	r18, 0xC0	; 192
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <__pack_f+0xf6>
    1d02:	21 5c       	subi	r18, 0xC1	; 193
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	4f 4f       	sbci	r20, 0xFF	; 255
    1d08:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0a:	e0 e0       	ldi	r30, 0x00	; 0
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	20 30       	cpi	r18, 0x00	; 0
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	3a 07       	cpc	r19, r26
    1d14:	a0 e0       	ldi	r26, 0x00	; 0
    1d16:	4a 07       	cpc	r20, r26
    1d18:	a0 e4       	ldi	r26, 0x40	; 64
    1d1a:	5a 07       	cpc	r21, r26
    1d1c:	10 f0       	brcs	.+4      	; 0x1d22 <__pack_f+0x10e>
    1d1e:	e1 e0       	ldi	r30, 0x01	; 1
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	79 01       	movw	r14, r18
    1d24:	8a 01       	movw	r16, r20
    1d26:	27 c0       	rjmp	.+78     	; 0x1d76 <__pack_f+0x162>
    1d28:	60 38       	cpi	r22, 0x80	; 128
    1d2a:	71 05       	cpc	r23, r1
    1d2c:	64 f5       	brge	.+88     	; 0x1d86 <__pack_f+0x172>
    1d2e:	fb 01       	movw	r30, r22
    1d30:	e1 58       	subi	r30, 0x81	; 129
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	d8 01       	movw	r26, r16
    1d36:	c7 01       	movw	r24, r14
    1d38:	8f 77       	andi	r24, 0x7F	; 127
    1d3a:	90 70       	andi	r25, 0x00	; 0
    1d3c:	a0 70       	andi	r26, 0x00	; 0
    1d3e:	b0 70       	andi	r27, 0x00	; 0
    1d40:	80 34       	cpi	r24, 0x40	; 64
    1d42:	91 05       	cpc	r25, r1
    1d44:	a1 05       	cpc	r26, r1
    1d46:	b1 05       	cpc	r27, r1
    1d48:	39 f4       	brne	.+14     	; 0x1d58 <__pack_f+0x144>
    1d4a:	e7 fe       	sbrs	r14, 7
    1d4c:	0d c0       	rjmp	.+26     	; 0x1d68 <__pack_f+0x154>
    1d4e:	80 e4       	ldi	r24, 0x40	; 64
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	04 c0       	rjmp	.+8      	; 0x1d60 <__pack_f+0x14c>
    1d58:	8f e3       	ldi	r24, 0x3F	; 63
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e8 0e       	add	r14, r24
    1d62:	f9 1e       	adc	r15, r25
    1d64:	0a 1f       	adc	r16, r26
    1d66:	1b 1f       	adc	r17, r27
    1d68:	17 ff       	sbrs	r17, 7
    1d6a:	05 c0       	rjmp	.+10     	; 0x1d76 <__pack_f+0x162>
    1d6c:	16 95       	lsr	r17
    1d6e:	07 95       	ror	r16
    1d70:	f7 94       	ror	r15
    1d72:	e7 94       	ror	r14
    1d74:	31 96       	adiw	r30, 0x01	; 1
    1d76:	87 e0       	ldi	r24, 0x07	; 7
    1d78:	16 95       	lsr	r17
    1d7a:	07 95       	ror	r16
    1d7c:	f7 94       	ror	r15
    1d7e:	e7 94       	ror	r14
    1d80:	8a 95       	dec	r24
    1d82:	d1 f7       	brne	.-12     	; 0x1d78 <__pack_f+0x164>
    1d84:	05 c0       	rjmp	.+10     	; 0x1d90 <__pack_f+0x17c>
    1d86:	ee 24       	eor	r14, r14
    1d88:	ff 24       	eor	r15, r15
    1d8a:	87 01       	movw	r16, r14
    1d8c:	ef ef       	ldi	r30, 0xFF	; 255
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	6e 2f       	mov	r22, r30
    1d92:	67 95       	ror	r22
    1d94:	66 27       	eor	r22, r22
    1d96:	67 95       	ror	r22
    1d98:	90 2f       	mov	r25, r16
    1d9a:	9f 77       	andi	r25, 0x7F	; 127
    1d9c:	d7 94       	ror	r13
    1d9e:	dd 24       	eor	r13, r13
    1da0:	d7 94       	ror	r13
    1da2:	8e 2f       	mov	r24, r30
    1da4:	86 95       	lsr	r24
    1da6:	49 2f       	mov	r20, r25
    1da8:	46 2b       	or	r20, r22
    1daa:	58 2f       	mov	r21, r24
    1dac:	5d 29       	or	r21, r13
    1dae:	b7 01       	movw	r22, r14
    1db0:	ca 01       	movw	r24, r20
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	08 95       	ret

00001dbe <__unpack_f>:
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	db 01       	movw	r26, r22
    1dc2:	40 81       	ld	r20, Z
    1dc4:	51 81       	ldd	r21, Z+1	; 0x01
    1dc6:	22 81       	ldd	r18, Z+2	; 0x02
    1dc8:	62 2f       	mov	r22, r18
    1dca:	6f 77       	andi	r22, 0x7F	; 127
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	22 1f       	adc	r18, r18
    1dd0:	22 27       	eor	r18, r18
    1dd2:	22 1f       	adc	r18, r18
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	89 2f       	mov	r24, r25
    1dd8:	88 0f       	add	r24, r24
    1dda:	82 2b       	or	r24, r18
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	99 1f       	adc	r25, r25
    1de2:	99 27       	eor	r25, r25
    1de4:	99 1f       	adc	r25, r25
    1de6:	11 96       	adiw	r26, 0x01	; 1
    1de8:	9c 93       	st	X, r25
    1dea:	11 97       	sbiw	r26, 0x01	; 1
    1dec:	21 15       	cp	r18, r1
    1dee:	31 05       	cpc	r19, r1
    1df0:	a9 f5       	brne	.+106    	; 0x1e5c <__unpack_f+0x9e>
    1df2:	41 15       	cp	r20, r1
    1df4:	51 05       	cpc	r21, r1
    1df6:	61 05       	cpc	r22, r1
    1df8:	71 05       	cpc	r23, r1
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__unpack_f+0x42>
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	37 c0       	rjmp	.+110    	; 0x1e6e <__unpack_f+0xb0>
    1e00:	82 e8       	ldi	r24, 0x82	; 130
    1e02:	9f ef       	ldi	r25, 0xFF	; 255
    1e04:	13 96       	adiw	r26, 0x03	; 3
    1e06:	9c 93       	st	X, r25
    1e08:	8e 93       	st	-X, r24
    1e0a:	12 97       	sbiw	r26, 0x02	; 2
    1e0c:	9a 01       	movw	r18, r20
    1e0e:	ab 01       	movw	r20, r22
    1e10:	67 e0       	ldi	r22, 0x07	; 7
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	44 1f       	adc	r20, r20
    1e18:	55 1f       	adc	r21, r21
    1e1a:	6a 95       	dec	r22
    1e1c:	d1 f7       	brne	.-12     	; 0x1e12 <__unpack_f+0x54>
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	8c 93       	st	X, r24
    1e22:	0d c0       	rjmp	.+26     	; 0x1e3e <__unpack_f+0x80>
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	44 1f       	adc	r20, r20
    1e2a:	55 1f       	adc	r21, r21
    1e2c:	12 96       	adiw	r26, 0x02	; 2
    1e2e:	8d 91       	ld	r24, X+
    1e30:	9c 91       	ld	r25, X
    1e32:	13 97       	sbiw	r26, 0x03	; 3
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	13 96       	adiw	r26, 0x03	; 3
    1e38:	9c 93       	st	X, r25
    1e3a:	8e 93       	st	-X, r24
    1e3c:	12 97       	sbiw	r26, 0x02	; 2
    1e3e:	20 30       	cpi	r18, 0x00	; 0
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	38 07       	cpc	r19, r24
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	48 07       	cpc	r20, r24
    1e48:	80 e4       	ldi	r24, 0x40	; 64
    1e4a:	58 07       	cpc	r21, r24
    1e4c:	58 f3       	brcs	.-42     	; 0x1e24 <__unpack_f+0x66>
    1e4e:	14 96       	adiw	r26, 0x04	; 4
    1e50:	2d 93       	st	X+, r18
    1e52:	3d 93       	st	X+, r19
    1e54:	4d 93       	st	X+, r20
    1e56:	5c 93       	st	X, r21
    1e58:	17 97       	sbiw	r26, 0x07	; 7
    1e5a:	08 95       	ret
    1e5c:	2f 3f       	cpi	r18, 0xFF	; 255
    1e5e:	31 05       	cpc	r19, r1
    1e60:	79 f4       	brne	.+30     	; 0x1e80 <__unpack_f+0xc2>
    1e62:	41 15       	cp	r20, r1
    1e64:	51 05       	cpc	r21, r1
    1e66:	61 05       	cpc	r22, r1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <__unpack_f+0xb4>
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	8c 93       	st	X, r24
    1e70:	08 95       	ret
    1e72:	64 ff       	sbrs	r22, 4
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <__unpack_f+0xbe>
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	8c 93       	st	X, r24
    1e7a:	12 c0       	rjmp	.+36     	; 0x1ea0 <__unpack_f+0xe2>
    1e7c:	1c 92       	st	X, r1
    1e7e:	10 c0       	rjmp	.+32     	; 0x1ea0 <__unpack_f+0xe2>
    1e80:	2f 57       	subi	r18, 0x7F	; 127
    1e82:	30 40       	sbci	r19, 0x00	; 0
    1e84:	13 96       	adiw	r26, 0x03	; 3
    1e86:	3c 93       	st	X, r19
    1e88:	2e 93       	st	-X, r18
    1e8a:	12 97       	sbiw	r26, 0x02	; 2
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	8c 93       	st	X, r24
    1e90:	87 e0       	ldi	r24, 0x07	; 7
    1e92:	44 0f       	add	r20, r20
    1e94:	55 1f       	adc	r21, r21
    1e96:	66 1f       	adc	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	8a 95       	dec	r24
    1e9c:	d1 f7       	brne	.-12     	; 0x1e92 <__unpack_f+0xd4>
    1e9e:	70 64       	ori	r23, 0x40	; 64
    1ea0:	14 96       	adiw	r26, 0x04	; 4
    1ea2:	4d 93       	st	X+, r20
    1ea4:	5d 93       	st	X+, r21
    1ea6:	6d 93       	st	X+, r22
    1ea8:	7c 93       	st	X, r23
    1eaa:	17 97       	sbiw	r26, 0x07	; 7
    1eac:	08 95       	ret

00001eae <__fpcmp_parts_f>:
    1eae:	1f 93       	push	r17
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	9c 91       	ld	r25, X
    1eb6:	92 30       	cpi	r25, 0x02	; 2
    1eb8:	08 f4       	brcc	.+2      	; 0x1ebc <__fpcmp_parts_f+0xe>
    1eba:	47 c0       	rjmp	.+142    	; 0x1f4a <__fpcmp_parts_f+0x9c>
    1ebc:	80 81       	ld	r24, Z
    1ebe:	82 30       	cpi	r24, 0x02	; 2
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <__fpcmp_parts_f+0x16>
    1ec2:	43 c0       	rjmp	.+134    	; 0x1f4a <__fpcmp_parts_f+0x9c>
    1ec4:	94 30       	cpi	r25, 0x04	; 4
    1ec6:	51 f4       	brne	.+20     	; 0x1edc <__fpcmp_parts_f+0x2e>
    1ec8:	11 96       	adiw	r26, 0x01	; 1
    1eca:	1c 91       	ld	r17, X
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	99 f5       	brne	.+102    	; 0x1f36 <__fpcmp_parts_f+0x88>
    1ed0:	81 81       	ldd	r24, Z+1	; 0x01
    1ed2:	68 2f       	mov	r22, r24
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	61 1b       	sub	r22, r17
    1ed8:	71 09       	sbc	r23, r1
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <__fpcmp_parts_f+0xac>
    1edc:	84 30       	cpi	r24, 0x04	; 4
    1ede:	21 f0       	breq	.+8      	; 0x1ee8 <__fpcmp_parts_f+0x3a>
    1ee0:	92 30       	cpi	r25, 0x02	; 2
    1ee2:	31 f4       	brne	.+12     	; 0x1ef0 <__fpcmp_parts_f+0x42>
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	b9 f1       	breq	.+110    	; 0x1f56 <__fpcmp_parts_f+0xa8>
    1ee8:	81 81       	ldd	r24, Z+1	; 0x01
    1eea:	88 23       	and	r24, r24
    1eec:	89 f1       	breq	.+98     	; 0x1f50 <__fpcmp_parts_f+0xa2>
    1eee:	2d c0       	rjmp	.+90     	; 0x1f4a <__fpcmp_parts_f+0x9c>
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	1c 91       	ld	r17, X
    1ef4:	11 97       	sbiw	r26, 0x01	; 1
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	f1 f0       	breq	.+60     	; 0x1f36 <__fpcmp_parts_f+0x88>
    1efa:	81 81       	ldd	r24, Z+1	; 0x01
    1efc:	18 17       	cp	r17, r24
    1efe:	d9 f4       	brne	.+54     	; 0x1f36 <__fpcmp_parts_f+0x88>
    1f00:	12 96       	adiw	r26, 0x02	; 2
    1f02:	2d 91       	ld	r18, X+
    1f04:	3c 91       	ld	r19, X
    1f06:	13 97       	sbiw	r26, 0x03	; 3
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	82 17       	cp	r24, r18
    1f0e:	93 07       	cpc	r25, r19
    1f10:	94 f0       	brlt	.+36     	; 0x1f36 <__fpcmp_parts_f+0x88>
    1f12:	28 17       	cp	r18, r24
    1f14:	39 07       	cpc	r19, r25
    1f16:	bc f0       	brlt	.+46     	; 0x1f46 <__fpcmp_parts_f+0x98>
    1f18:	14 96       	adiw	r26, 0x04	; 4
    1f1a:	8d 91       	ld	r24, X+
    1f1c:	9d 91       	ld	r25, X+
    1f1e:	0d 90       	ld	r0, X+
    1f20:	bc 91       	ld	r27, X
    1f22:	a0 2d       	mov	r26, r0
    1f24:	24 81       	ldd	r18, Z+4	; 0x04
    1f26:	35 81       	ldd	r19, Z+5	; 0x05
    1f28:	46 81       	ldd	r20, Z+6	; 0x06
    1f2a:	57 81       	ldd	r21, Z+7	; 0x07
    1f2c:	28 17       	cp	r18, r24
    1f2e:	39 07       	cpc	r19, r25
    1f30:	4a 07       	cpc	r20, r26
    1f32:	5b 07       	cpc	r21, r27
    1f34:	18 f4       	brcc	.+6      	; 0x1f3c <__fpcmp_parts_f+0x8e>
    1f36:	11 23       	and	r17, r17
    1f38:	41 f0       	breq	.+16     	; 0x1f4a <__fpcmp_parts_f+0x9c>
    1f3a:	0a c0       	rjmp	.+20     	; 0x1f50 <__fpcmp_parts_f+0xa2>
    1f3c:	82 17       	cp	r24, r18
    1f3e:	93 07       	cpc	r25, r19
    1f40:	a4 07       	cpc	r26, r20
    1f42:	b5 07       	cpc	r27, r21
    1f44:	40 f4       	brcc	.+16     	; 0x1f56 <__fpcmp_parts_f+0xa8>
    1f46:	11 23       	and	r17, r17
    1f48:	19 f0       	breq	.+6      	; 0x1f50 <__fpcmp_parts_f+0xa2>
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <__fpcmp_parts_f+0xac>
    1f50:	6f ef       	ldi	r22, 0xFF	; 255
    1f52:	7f ef       	ldi	r23, 0xFF	; 255
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <__fpcmp_parts_f+0xac>
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	1f 91       	pop	r17
    1f5e:	08 95       	ret

00001f60 <__udivmodsi4>:
    1f60:	a1 e2       	ldi	r26, 0x21	; 33
    1f62:	1a 2e       	mov	r1, r26
    1f64:	aa 1b       	sub	r26, r26
    1f66:	bb 1b       	sub	r27, r27
    1f68:	fd 01       	movw	r30, r26
    1f6a:	0d c0       	rjmp	.+26     	; 0x1f86 <__udivmodsi4_ep>

00001f6c <__udivmodsi4_loop>:
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	bb 1f       	adc	r27, r27
    1f70:	ee 1f       	adc	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	a2 17       	cp	r26, r18
    1f76:	b3 07       	cpc	r27, r19
    1f78:	e4 07       	cpc	r30, r20
    1f7a:	f5 07       	cpc	r31, r21
    1f7c:	20 f0       	brcs	.+8      	; 0x1f86 <__udivmodsi4_ep>
    1f7e:	a2 1b       	sub	r26, r18
    1f80:	b3 0b       	sbc	r27, r19
    1f82:	e4 0b       	sbc	r30, r20
    1f84:	f5 0b       	sbc	r31, r21

00001f86 <__udivmodsi4_ep>:
    1f86:	66 1f       	adc	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	1a 94       	dec	r1
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <__udivmodsi4_loop>
    1f92:	60 95       	com	r22
    1f94:	70 95       	com	r23
    1f96:	80 95       	com	r24
    1f98:	90 95       	com	r25
    1f9a:	9b 01       	movw	r18, r22
    1f9c:	ac 01       	movw	r20, r24
    1f9e:	bd 01       	movw	r22, r26
    1fa0:	cf 01       	movw	r24, r30
    1fa2:	08 95       	ret

00001fa4 <__prologue_saves__>:
    1fa4:	2f 92       	push	r2
    1fa6:	3f 92       	push	r3
    1fa8:	4f 92       	push	r4
    1faa:	5f 92       	push	r5
    1fac:	6f 92       	push	r6
    1fae:	7f 92       	push	r7
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	ca 1b       	sub	r28, r26
    1fce:	db 0b       	sbc	r29, r27
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	09 94       	ijmp

00001fdc <__epilogue_restores__>:
    1fdc:	2a 88       	ldd	r2, Y+18	; 0x12
    1fde:	39 88       	ldd	r3, Y+17	; 0x11
    1fe0:	48 88       	ldd	r4, Y+16	; 0x10
    1fe2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fe8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fea:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fec:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fee:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff2:	df 80       	ldd	r13, Y+7	; 0x07
    1ff4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff8:	0c 81       	ldd	r16, Y+4	; 0x04
    1ffa:	1b 81       	ldd	r17, Y+3	; 0x03
    1ffc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ffe:	b9 81       	ldd	r27, Y+1	; 0x01
    2000:	ce 0f       	add	r28, r30
    2002:	d1 1d       	adc	r29, r1
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	ed 01       	movw	r28, r26
    2010:	08 95       	ret

00002012 <itoa>:
    2012:	fb 01       	movw	r30, r22
    2014:	9f 01       	movw	r18, r30
    2016:	e8 94       	clt
    2018:	42 30       	cpi	r20, 0x02	; 2
    201a:	c4 f0       	brlt	.+48     	; 0x204c <itoa+0x3a>
    201c:	45 32       	cpi	r20, 0x25	; 37
    201e:	b4 f4       	brge	.+44     	; 0x204c <itoa+0x3a>
    2020:	4a 30       	cpi	r20, 0x0A	; 10
    2022:	29 f4       	brne	.+10     	; 0x202e <itoa+0x1c>
    2024:	97 fb       	bst	r25, 7
    2026:	1e f4       	brtc	.+6      	; 0x202e <itoa+0x1c>
    2028:	90 95       	com	r25
    202a:	81 95       	neg	r24
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	64 2f       	mov	r22, r20
    2030:	77 27       	eor	r23, r23
    2032:	0e 94 3a 10 	call	0x2074	; 0x2074 <__udivmodhi4>
    2036:	80 5d       	subi	r24, 0xD0	; 208
    2038:	8a 33       	cpi	r24, 0x3A	; 58
    203a:	0c f0       	brlt	.+2      	; 0x203e <itoa+0x2c>
    203c:	89 5d       	subi	r24, 0xD9	; 217
    203e:	81 93       	st	Z+, r24
    2040:	cb 01       	movw	r24, r22
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	a1 f7       	brne	.-24     	; 0x202e <itoa+0x1c>
    2046:	16 f4       	brtc	.+4      	; 0x204c <itoa+0x3a>
    2048:	5d e2       	ldi	r21, 0x2D	; 45
    204a:	51 93       	st	Z+, r21
    204c:	10 82       	st	Z, r1
    204e:	c9 01       	movw	r24, r18
    2050:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <strrev>

00002054 <strrev>:
    2054:	dc 01       	movw	r26, r24
    2056:	fc 01       	movw	r30, r24
    2058:	67 2f       	mov	r22, r23
    205a:	71 91       	ld	r23, Z+
    205c:	77 23       	and	r23, r23
    205e:	e1 f7       	brne	.-8      	; 0x2058 <strrev+0x4>
    2060:	32 97       	sbiw	r30, 0x02	; 2
    2062:	04 c0       	rjmp	.+8      	; 0x206c <strrev+0x18>
    2064:	7c 91       	ld	r23, X
    2066:	6d 93       	st	X+, r22
    2068:	70 83       	st	Z, r23
    206a:	62 91       	ld	r22, -Z
    206c:	ae 17       	cp	r26, r30
    206e:	bf 07       	cpc	r27, r31
    2070:	c8 f3       	brcs	.-14     	; 0x2064 <strrev+0x10>
    2072:	08 95       	ret

00002074 <__udivmodhi4>:
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	51 e1       	ldi	r21, 0x11	; 17
    207a:	07 c0       	rjmp	.+14     	; 0x208a <__udivmodhi4_ep>

0000207c <__udivmodhi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	a6 17       	cp	r26, r22
    2082:	b7 07       	cpc	r27, r23
    2084:	10 f0       	brcs	.+4      	; 0x208a <__udivmodhi4_ep>
    2086:	a6 1b       	sub	r26, r22
    2088:	b7 0b       	sbc	r27, r23

0000208a <__udivmodhi4_ep>:
    208a:	88 1f       	adc	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	5a 95       	dec	r21
    2090:	a9 f7       	brne	.-22     	; 0x207c <__udivmodhi4_loop>
    2092:	80 95       	com	r24
    2094:	90 95       	com	r25
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	08 95       	ret

0000209c <_exit>:
    209c:	f8 94       	cli

0000209e <__stop_program>:
    209e:	ff cf       	rjmp	.-2      	; 0x209e <__stop_program>
